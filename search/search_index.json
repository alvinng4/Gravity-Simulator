{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"grav_sim","text":"<p>N-body gravity simulation library with C and Python API</p> <p>Project Homepage and documentations: https://alvinng4.github.io/grav_sim/</p> <p>Target Audience:</p> <ul> <li>Physics students</li> <li>Anyone interested in N-body simulations</li> </ul> <p>Features:</p> <ul> <li>Ten integrators including WHFast and IAS15</li> <li>Barnes-Hut algorithm with linear octree</li> <li>Particle-Mesh method for cosmological structure formation</li> <li>Multiple sample projects</li> </ul> <p> </p>"},{"location":"#sample-projects","title":"Sample projects","text":""},{"location":"#evolving-the-solar-system-for-1-million-years","title":"Evolving the solar system for 1 million years","text":""},{"location":"#asteroid-belt-simulation","title":"Asteroid belt simulation","text":""},{"location":"#formation-of-kirkwood-gaps","title":"Formation of Kirkwood gaps","text":""},{"location":"#galaxy-collision","title":"Galaxy collision","text":""},{"location":"#cosmological-structure-formation","title":"Cosmological structure formation","text":"<p>Coming soon!</p>"},{"location":"#feedback-and-bugs","title":"Feedback and Bugs","text":"<p>If you found any bugs or want to leave some feedback, please feel free to let me know by opening an issue or sending an email to alvinng324(at)gmail.com.</p>"},{"location":"12_steps_to_n_body_simulation/","title":"12 steps to N-body simulation","text":"<p>Coming soon!</p>"},{"location":"docs/","title":"Homepage","text":"<p>In construction...</p>"},{"location":"docs/API/","title":"API","text":""},{"location":"docs/API/#documentation","title":"Documentation","text":"<ul> <li>Quick Start<ul> <li>Prerequisite</li> <li>Installation</li> <li>Some notes</li> </ul> </li> <li>GravitySimulator API</li> <li>Default systems</li> <li>Integrators<ul> <li>Simple methods</li> <li>Embedded Runge-Kutta methods</li> <li>IAS15</li> <li>WHFast</li> </ul> </li> <li>Saving the results</li> <li>Output animations in .gif</li> </ul>"},{"location":"docs/API/#quick-start","title":"Quick Start","text":""},{"location":"docs/API/#prerequisite","title":"Prerequisite","text":"<ol> <li>Python version 3.10 or higher. </li> <li>Any C compiler that supports C99</li> </ol>"},{"location":"docs/API/#installation","title":"Installation","text":"<ol> <li>Download the source files, or clone this repository by     <pre><code>git clone https://github.com/alvinng4/Gravity-Simulator\n</code></pre></li> <li>Install the required packages by     <pre><code>pip install .\n</code></pre>     If the installation is not successful, install the following packages manually:     <pre><code>matplotlib==3.8.3\nnumpy==1.26.4\nrich==13.7.1\nPillow==10.3.0\n</code></pre></li> <li> <p>Compile the C library</p> <p>I have provided a compilation of the C library in the repository. If it does not run on your computer, you may need to recompile it.</p> <p>To compile the C library, simply go to the src folder and run <pre><code>make [CC=gcc] [USE_OPENMP=1] [USE_CUDA=1]\n</code></pre> <code>CC</code>: To indicate which C compiler to use. <code>USE_OPENMP=1</code>: To enable OpenMP acceleration. <code>USE_CUDA=1</code>: To enable CUDA acceleration.</p> <p>Note: - If the program is compiled with openmp, the program will run with openmp by default, which could be slow if \\(N\\) is small. Use <code>export OMP_NUM_THREADS=1</code> to disable openmp.</p> </li> </ol>"},{"location":"docs/API/#some-notes","title":"Some notes","text":"<ul> <li>The default unit for this project is solar masses, AU and days, with \\(G = 0.00029591220828411956 \\text{ M}_\\odot^{-1} \\text{ AU}^3 \\text{ day}^{-2}\\). It is possible to change this value in the API by changing <code>system.G</code>.</li> <li>Check the <code>examples</code> folder for API tutorial and sample projects</li> <li>For WHFast, features including Barnes-Hut algorithm are not available due to implementation difficulties.</li> </ul>"},{"location":"docs/API/#gravitysimulator-api","title":"GravitySimulator API","text":"<p>You may import the GravitySimulator API from <code>gravity_sim</code> to perform gravity simulation. See <code>examples/tutorial.ipynb</code> or Sample projects for some example usage. If your computer cannot render jupyter notebook (files end with <code>.ipynb</code>), you can view them on github.</p>"},{"location":"docs/API/#integrators","title":"integrators","text":"<p><code>euler</code>, <code>euler_cromer</code>, <code>rk4</code>, <code>leapfrog</code>, <code>rkf45</code>, <code>dopri</code>, <code>dverk</code>, <code>rkf78</code>, <code>ias15</code>, <code>whfast</code></p>"},{"location":"docs/API/#acceleration_method","title":"acceleration_method","text":"<ul> <li><code>pairwise</code><ul> <li>Brute force pairwise calculations for gravitational acceleration</li> <li>Time complexity: \\(O(N^2)\\)</li> </ul> </li> <li><code>massless</code><ul> <li>Similar to <code>pairwise</code>, but seperate the calculations for massive and massless particles</li> <li>Time complexity: \\(O(M^2 + MN)\\), where \\(M\\) and \\(N\\) are the number of massive and massless particles respectively</li> </ul> </li> <li><code>barnes_hut</code><ul> <li>Calculate gravitational acceleration with Barnes-Hut algorithm</li> <li>Time complexity: \\(O(N \\log{N})\\)</li> <li><code>**kwargs</code>: <code>opening_angle</code><ul> <li>Threshold for Barnes-Hut algorithm, default = 0.5</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/API/#storing_method","title":"storing_method","text":"<ul> <li><code>default</code><ul> <li>Store solutions directly into memory</li> </ul> </li> <li><code>flush</code><ul> <li>Flush intermediate results into a csv file to reduce memory pressure.</li> </ul> </li> <li><code>disabled</code><ul> <li>To not store any result.</li> </ul> </li> </ul>"},{"location":"docs/API/#built-in-systems","title":"Built-in systems","text":"<p>Some systems are available by default and can be loaded readily. | System | Description | |:-------|:------------|  | circular_binary_orbit | A circular orbit formed by two stars | | eccentric_binary_orbit | An eccentric orbit formed by two stars | | 3d_helix | An upward helix consists of three stars | | sun_earth_moon | The Sun, Earth, and Moon system | | figure-8 | A \"figure-8\" orbit involving three stars  | | pyth-3-body | Three stars arranged in a triangle with length ratios of 3, 4, and 5. It is a highly chaotic orbit with close encounters that can be used to test the difference between fixed and variable step size integrators. | | solar_system | Solar System with the Sun and the planets | | solar_system_plus | solar_system with the inclusion of Pluto, Ceres, and Vesta  |</p>"},{"location":"docs/API/#integrators_1","title":"Integrators","text":""},{"location":"docs/API/#simple-methods","title":"Simple methods","text":"<p>Below are four simple fixed step size methods to simulate the system with a given step size \\(\\text{d}t\\). | Simple methods | |:-----------| | Euler | | Euler Cromer | | Fourth Order Runge-Kutta (RK4) | | Leapfrog |</p>"},{"location":"docs/API/#embedded-runge-kutta-methods","title":"Embedded Runge-Kutta methods","text":"<p>Embedded RK methods are adaptive methods that decides the step size automatically based on the estimated error. It can resolve close encounters but fail to conserve energy over long time scele.</p> Embdedded Runge-Kutta methods Recommended tolerance* Runge\u2013Kutta\u2013Fehlberg 4(5) \\(10^{-8}\\) to \\(10^{-14}\\) Dormand\u2013Prince method (DOPRI) 5(4) \\(10^{-8}\\) to \\(10^{-14}\\) Verner's method (DVERK) 6(5) \\(10^{-8}\\) to \\(10^{-14}\\) Runge\u2013Kutta\u2013Fehlberg 7(8) \\(10^{-4}\\) to \\(10^{-8}\\) <p>*For reference only</p>"},{"location":"docs/API/#ias15","title":"IAS15","text":"<p>IAS15 (Implicit integrator with Adaptive time Stepping, 15th order) is a highly optimized integrator with extremely high accuracy. It is the default method for this project.</p> <p>The recommended tolerance* is \\(10^{-9}\\). Since the integrator is 15th order, changing the tolerance results in little improvement in performance, but a huge penalty in accuracy. Therefore, it is not recommended to change this tolerance.</p> <p>*For reference only</p>"},{"location":"docs/API/#whfast","title":"WHFast","text":"<p>WHFast is a second order symplectic method with fixed step size, which conserves energy over long integration period. This integrator cannot resolve close encounter.</p>"},{"location":"docs/API/#kwargs-for-whfast","title":"<code>**kwargs</code> for WHFast","text":"Argument Description Default Value <code>whfast_kepler_tol</code> Tolerance in solving the Kepler's equation \\(10^{-12}\\) <code>whfast_kepler_max_iter</code> Maximum number of iterations in solving Kepler's equation 500 <code>whfast_kepler_auto_remove</code> Integer flag to indicate whether to remove objects that failed to converge in Kepler's equation False <code>whfast_kepler_auto_remove_tol</code> Tolerance for removing objects that failed to converge in Kepler's equation \\(10^{-8}\\) <p>[!WARNING]\\ When using WHFast, the order of adding objects matters. Since WHFast use Jacobi coordinate, we must add the inner object first, followed by outer objects relative to the central star. For convenience, you may also add the objects in any order, then call <code>system.sort_by_distance(primary_object_name)</code> or <code>system.sort_by_distance(primary_object_index)</code></p>"},{"location":"docs/API/#saving-the-results","title":"Saving the results","text":"<p>If you save the results, the data will be saved in the default unit (solar masses, AU and days), and follow this format: <pre><code>time, dt, total energy, x1, y1, z1, ... vx1, vy1, vz1, ...\n</code></pre></p>"},{"location":"docs/data_sources/","title":"Data sources","text":""},{"location":"docs/data_sources/#data-sources","title":"Data Sources","text":"<p>The solar system positions and velocities data at 1/Jan/2024 are collected from the Horizons System [2]. Gravitational constant, and masses of the solar system objects are calculated using the data from R.S. Park et. al. [3].</p>"},{"location":"docs/references/","title":"References","text":""},{"location":"docs/references/#references","title":"References","text":"<ol> <li>E. Hairer, C. Lubich, and G. Wanner, \"Reducing Rounding Errors\" in Geometric Numerical Integration: Structure-Preserving Algorithms for Ordinary Differential Equations. Springer, 2004, pp. 272-274.</li> <li>Horizons System, Jet Propulsion Laboratory, https://ssd.jpl.nasa.gov/horizons/</li> <li>R. S. Park, et al., 2021, \u201cThe JPL Planetary and Lunar Ephemerides DE440 and DE441\u201d, https://ssd.jpl.nasa.gov/doc/Park.2021.AJ.DE440.pdf, Astronomical Journal, 161:105.</li> <li>H. Rein, and D. S. Spiegel, 2014, \"IAS15: A fast, adaptive, high-order integrator for gravitational dynamics, accurate to machine precision over a billion orbits\", Monthly Notices of the Royal Astronomical Society 446: 1424\u20131437.</li> </ol>"},{"location":"docs/documentations/","title":"Index","text":"<p>Coming Soon!</p>"},{"location":"docs/documentations/barnes_hut/","title":"Barnes-Hut algorithm","text":"<p>The classic Barnes-Hut algorithm \\cite{barnes_hierarchical_1986} provides a way to approximate forces without losing accuracy at close range. Because gravity decays at a quadratic rate, the accuracy of long range interactions are less important. Therefore, it is reasonable to approximate a far cluster of  particles as a single particle with mass \\(m = m_{\\textnormal{cluster}} \\) and coordinate \\(x = x_{\\textnormal{com, cluster} } \\). One simple choice of criterion is the opening angle \\(\\theta = l / d\\), where \\(l\\) is the length of the cubical cell enclosing the cluster and \\(d\\) is the distance between the target particle and the center of mass of the cluster \\mbox{(see figure \\ref{fig:barnes_hut}).} This is purely geometric and does not depends on the  mass or number of particles in the cluster.</p> \\[\\begin{figure}[!h]     \\begin{subfigure}{0.31\\textwidth}         \\centering         \\includegraphics[width=\\textwidth]{figures/barnes_hut_a/barnes_hut_a.pdf}         \\caption{Decomposing the spatial domain}         \\label{subfig:barnes_hut_a}     \\end{subfigure}     \\begin{subfigure}{0.31\\textwidth}         \\centering         \\includegraphics[width=\\textwidth]{figures/barnes_hut_b/barnes_hut_b.pdf}         \\caption{Checking opening angle}         \\label{subfig:barnes_hut_b}     \\end{subfigure}     \\begin{subfigure}{0.31\\textwidth}         \\centering         \\includegraphics[width=\\textwidth]{figures/barnes_hut_c/barnes_hut_c.pdf}         \\caption{Taking approximation}         \\label{subfig:barnes_hut_c}     \\end{subfigure}     \\caption{Illustration of Barnes-Hut algorithm.}     \\label{fig:barnes_hut} \\end{figure}\\] <p>At each force evaluation, we perform the following operations: \\begin{itemize}%[leftmargin=]     \\item[(1)] Construct an octree by decomposing the spatial domain hierarchically.     \\item[(2)] For each particle, traverse the octree from the root into child nodes:     \\begin{itemize}%[leftmargin=]         \\item[(i)] If the current node has only one particle, evaluate the force directly. Return to parent node.         \\item[(ii)] Otherwise, check the opening criterion. If passed, evaluate the                     force with the center of mass precomputed in tree construction. Return to parent node.         \\item[(iii)] If not passed, traverse deeper.     \\end{itemize} \\end{itemize} The technical details for constructing an octree are provided in Appendix \\ref{app:tree_construction}. For a reasonable choice of \\(\\theta\\) \\mbox{(e.g. \\(\\theta \\sim 1\\))}, the force evaluation of one particle only takes \\(\\mathcal{O}(\\log N)\\) as the expected tree depth to traverse is \\(\\mathcal{O}(\\log N)\\). This gives the time complexity \\(\\mathcal{O}(N \\log N)\\) for \\(N\\) particles.</p> <p>Despite the simplicity of the algorithm, it provides an immense speed up over the brute force \\(\\mathcal{O}(N^2)\\) algorithm. In figure \\ref{fig:barnes_hut_benchmark}, we provides a benchmark of the two algorithms ran on Macbook Air M1 with opening angle \\(\\theta = 0.5, 1\\). As shown from the result, at the same runtime, Barnes-Hut algorithm could handle \\(N \\sim 10^6 - 10^7\\) particles while the brute force algorithm could only do \\(N \\sim 10^5\\). This enables us to run simulations with much larger scales. As a demonstration, we ran a galaxy collision simulation with 60000 particles using the initial conditions from Gadget-2 \\cite{gadget2}. The result is shown on figure \\ref{fig:galaxy_collision}.  It is done within 30 minutes on Macbook Air M1 with \\(\\theta = 0.5\\).</p> <p>In modern cosmological simulation code, the tree algorithm is adopted with one-sided multipole expansion that \\linebreak provides higher efficiency and accuracy. In addition, fast mutlipole algorithm (FMM) \\cite{Dehnen_2000} \\cite{DEHNEN200227} with dual-sided  \\linebreak multipole expansion provides even higher efficiency with \\(\\mathcal{O}(N)\\) time complexity.</p> \\[\\begin{figure}[h]     \\centering     \\includegraphics[width=0.5\\textwidth]{figures/barnes_hut_benchmark/barnes_hut_benchmark.pdf}     \\caption{         Benchmarks of direct pairwise computation versus Barnes-Hut algorithm.         The particles are chosen         randomly with \\((x, y, z) \\in [-1, 1)\\)         obtained from a uniform distribution using a random number generator.         The pairwise algorithm spent 18.6 seconds on \\(N = 10^5\\), while Barnes-Hut algorithm         with \\(\\theta = 1\\) and \\(\\theta = 0.5\\) spent \\(7.94\\) s on \\(N = 10^6\\) and         \\(18.2\\) s on \\(N = 10^7\\) respectively.          }     \\label{fig:barnes_hut_benchmark} \\end{figure}\\] \\[\\begin{figure}[!h]     \\centering     \\includegraphics[width=\\textwidth]{figures/galaxy_collision.png}     \\caption{         Galaxy collision simulation with 20000 disk and 40000 halo particles.          The system is evolved for 4 Gyr using the Leapfrog algorithm,          with \\(\\,\\Delta t = 2 \\textnormal{ Myr}  \\) (i.e. 2000 time steps).         Barnes-Hut algorithm with \\(\\theta = 0.5\\) was used to obtain the          gravitational acceleration. Visualizations were done with gadgetviewer.     }     \\label{fig:galaxy_collision} \\end{figure}\\]"},{"location":"docs/documentations/particle_mesh/","title":"Particle-Mesh algorithm","text":"<p>Coming Soon!</p>"},{"location":"docs/documentations/reducing_round_off_error/","title":"Reducing rounding error with compensated summation","text":"<p>A method known as compensated summation <sup>1</sup> is implemented for all integrators in grav_sim except WHFast:</p> <p>When we advance our system by \\(\\Delta t\\), we have </p> <p>\\(x_{n+1} = x_n + \\delta x\\)</p> <p>Since \\(\\delta x\\) is very small compared to \\(x_n\\), many digits of precision will be lost. By compensated summation, we keep track of the losing digits using another variable, which allows us to effectively eliminates round off error with very little cost.</p> <p>The algorithm is as follows:</p> <ol> <li>Calculate \\(\\delta x\\)</li> <li>\\(x_0 \\leftarrow x\\)</li> <li>\\(e \\leftarrow  e + \\delta x\\)</li> <li>\\(x \\leftarrow  x_0 + e\\)</li> <li>\\(e \\leftarrow  e + (x_0 - x)\\)</li> </ol> <p>Example</p> <p>Consider </p> <p>\\(x_n\\)      = 1.3124125125124122</p> <p>\\(\\delta x\\) = 0.000000012412512412512</p> <p>\\(x_{n+1} = x_n + \\delta x\\) = 1.312412524924924612512</p> <p>Let us try to add them together in Python: <pre><code>&gt;&gt;&gt; x = 1.3124125125124122\n&gt;&gt;&gt; dx = 0.000000012412512412512\n&gt;&gt;&gt; x = x + dx\n&gt;&gt;&gt; print(f\"{x:.19f}\")\n1.3124125249249245506\n</code></pre></p> <p>The result is 1.3124125249249245506.</p> <p>Round off error \\(\\approx 6.1912 \\times 10^{-17}\\)</p> <p>Now we try compensated summation: <pre><code>&gt;&gt;&gt; x = 1.3124125125124122\n&gt;&gt;&gt; dx = 0.000000012412512412512\n&gt;&gt;&gt; e = 0.0\n&gt;&gt;&gt; x_0 = x\n&gt;&gt;&gt; e = e + dx\n&gt;&gt;&gt; x = x_0 + e\n&gt;&gt;&gt; e = e + (x_0 - x)\n&gt;&gt;&gt; e\n6.12222940391771e-17\n</code></pre> As we can see, the value of \\(e\\) is very close to the round off error! Therefore, the new variable \\(e\\) effectively keeps track of the lost digits.</p> <ol> <li> <p>(Ernst Hairer), Gerhard Wanner, and Christian Lubich. Geometric Numerical Integration, chapter VIII, pages 272\u2013274. Springer, Berlin, Heidelberg, 2002.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/documentations/CAPI/grav_sim/","title":"Grav sim","text":"<p>Coming soon!</p>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/","title":"GravitySimulatorAPI","text":"<p>Gravity simulator API</p> Source code in <code>grav_sim/api.py</code> <pre><code>class GravitySimulatorAPI:\n    \"\"\"Gravity simulator API\"\"\"\n\n    def __init__(self, c_lib_path: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Initialize gravity simulator API\n\n        Parameters\n        ----------\n        c_lib_path : str, optional\n            Path to C library, by default None\n        \"\"\"\n        if c_lib_path is not None:\n            self.c_lib = utils.load_c_lib(Path(c_lib_path))\n        else:\n            self.c_lib = utils.load_c_lib()\n        utils.initialize_c_lib(self.c_lib)\n\n        # System\n        self.BUILT_IN_SYSTEMS = System.BUILT_IN_SYSTEMS\n\n        # Plotting\n        self.SOLAR_SYSTEM_COLORS = plotting.SOLAR_SYSTEM_COLORS\n        self.plot_quantity_against_time = plotting.plot_quantity_against_time\n        self.plot_2d_trajectory = plotting.plot_2d_trajectory\n        self.plot_3d_trajectory = plotting.plot_3d_trajectory\n\n        # Simulator\n        self.simulator = Simulator(c_lib=self.c_lib)\n        self.DAYS_PER_YEAR = self.simulator.DAYS_PER_YEAR\n        self.launch_simulation = self.simulator.launch_simulation\n\n        # Parameters\n        self.AVAILABLE_ACCELERATION_METHODS = parameters.AccelerationParam.AVAILABLE_ACCELERATION_METHODS\n        self.AVAILABLE_INTEGRATORS = parameters.IntegratorParam.AVAILABLE_INTEGRATORS\n        self.FIXED_STEP_SIZE_INTEGRATORS = parameters.IntegratorParam.FIXED_STEP_SIZE_INTEGRATORS\n        self.ADAPTIVE_STEP_SIZE_INTEGRATORS = parameters.IntegratorParam.ADAPTIVE_STEP_SIZE_INTEGRATORS\n        self.AVAILABLE_OUTPUT_METHODS = parameters.OutputParam.AVAILABLE_OUTPUT_METHODS\n        self.AVAILABLE_OUTPUT_DTYPE = parameters.OutputParam.AVAILABLE_OUTPUT_DTYPE\n\n    def get_new_system(self) -&gt; System:\n        \"\"\"Create a gravitational system\n\n        Returns\n        -------\n        System object\n        \"\"\"\n        return System(c_lib=self.c_lib)\n\n    def load_system(\n        self,\n        file_path: str | Path,\n    ) -&gt; System:\n        \"\"\"Load system from a CSV file\n\n        Parameters\n        ----------\n        file_path : str\n            File path to load the system from\n        \"\"\"\n        return System.load_system(self.c_lib, file_path)\n\n    def get_built_in_system(self, system_name: str) -&gt; System:\n        \"\"\"Get a built-in gravitational system\n\n        Parameters\n        ----------\n        system_name : str\n            Name of the built-in system to be loaded.\n        \"\"\"\n        return System.get_built_in_system(self.c_lib, system_name)\n\n    @staticmethod\n    def get_new_parameters() -&gt; Tuple[\n        parameters.AccelerationParam,\n        parameters.IntegratorParam,\n        parameters.OutputParam,\n        parameters.Settings,\n    ]:\n        \"\"\"Create new simulation parameters\n\n        Returns\n        -------\n        Tuple of acceleration, integrator, output, and settings parameters\n        \"\"\"\n        acceleration_param = parameters.AccelerationParam()\n        integrator_param = parameters.IntegratorParam()\n        output_param = parameters.OutputParam()\n        settings = parameters.Settings()\n\n        return acceleration_param, integrator_param, output_param, settings\n\n    def days_to_years(self, days: float | np.ndarray) -&gt; float | np.ndarray:\n        return days / self.simulator.DAYS_PER_YEAR\n\n    def years_to_days(self, years: float | np.ndarray) -&gt; float | np.ndarray:\n        return years * self.simulator.DAYS_PER_YEAR\n\n    @staticmethod\n    def read_csv_data(\n        output_dir: str | Path,\n    ) -&gt; Tuple[float, np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n        \"\"\"Read CSV snapshots from the output directory,\n        assuming number of particles and particle_ids\n        stays the same\n\n        Parameters\n        ----------\n        output_dir : str | Path\n            Output directory path\n\n        Returns\n        -------\n        G : float\n            Gravitational constant\n        time : np.ndarray\n            Simulation time of each snapshot\n        dt : np.ndarray\n            Time step of each snapshot\n        particle_ids : np.ndarray\n            1D array of Particle IDs\n        sol_state : np.ndarray\n            3D array of solution state for each snapshot, with shape\n            (num_snapshots, num_particles, 7) being\n            [m, x, y, z, vx, vy, vz]\n        \"\"\"\n        output_dir = Path(output_dir)\n        if not output_dir.is_dir():\n            raise FileNotFoundError(f\"Output directory not found: {output_dir}\")\n\n        snapshot_files = sorted(output_dir.glob(\"snapshot_*.csv\"))\n        if len(snapshot_files) == 0:\n            raise FileNotFoundError(f\"No snapshot files found in: {output_dir}\")\n\n        G = -1.0\n        time = np.zeros(len(snapshot_files), dtype=np.float64)\n        dt = np.zeros(len(snapshot_files), dtype=np.float64)\n\n        for i, snapshot_file in enumerate(snapshot_files):\n            # Read the metadata\n            with open(snapshot_file, \"r\") as file:\n                read_metadata_num_particles = False\n                read_metadata_G = False\n                read_metadata_time = False\n                read_metadata_dt = False\n                for line in file:\n                    line = line.strip()\n\n                    if line.startswith(\"#\"):\n                        if line.startswith(\"# num_particles\"):\n                            if i == 0:\n                                num_particles = int(line.split(\":\")[1].strip())\n                            elif num_particles != int(line.split(\":\")[1].strip()):\n                                raise ValueError(\n                                    f\"Number of particles changed from {num_particles} to {int(line.split(':')[1].strip())}\"\n                                )\n                            read_metadata_num_particles = True\n                        elif line.startswith(\"# G\"):\n                            G = float(line.split(\":\")[1].strip())\n                            read_metadata_G = True\n                        elif line.startswith(\"# time\"):\n                            time[i] = float(line.split(\":\")[1].strip())\n                            read_metadata_time = True\n                        elif line.startswith(\"# dt\"):\n                            dt[i] = float(line.split(\":\")[1].strip())\n                            read_metadata_dt = True\n\n                    if (\n                        read_metadata_num_particles\n                        and read_metadata_G\n                        and read_metadata_time\n                        and read_metadata_dt\n                    ):\n                        break\n\n        # Read the data\n        particle_ids = np.zeros(num_particles, dtype=np.int32)\n        sol_state = np.zeros((len(snapshot_files), num_particles, 7), dtype=np.float64)\n        for i, snapshot_file in enumerate(snapshot_files):\n            data = np.genfromtxt(snapshot_file, delimiter=\",\", skip_header=5)\n            if i == 0:\n                particle_ids = data[:, 0].astype(np.int32)\n                particle_ids = np.sort(particle_ids)\n                _, num_duplicates = np.unique(particle_ids, return_counts=True)\n                if np.any(num_duplicates &gt; 1):\n                    raise ValueError(f\"Particle IDs are not unique. Particle IDs: {particle_ids}\")\n\n            snapshot_particle_ids = data[:, 0].astype(np.int32)\n\n            # Sort the data by particle IDs\n            sorted_indices = np.argsort(snapshot_particle_ids)\n            data = data[sorted_indices]\n\n            # Check if the particle IDs match\n            if not np.array_equal(particle_ids, snapshot_particle_ids):\n                raise ValueError(\n                    f\"Particle IDs do not match in snapshot {i + 1}: {snapshot_file}\"\n                )\n\n            # Store the data\n            sol_state[i, :, :] = data[:, 1:]\n\n        return G, time, dt, particle_ids, sol_state\n\n    @staticmethod\n    def delete_snapshots(\n        output_dir: str | Path,\n    ):\n        \"\"\"Delete all snapshots in the output directory\n\n        Parameters\n        ----------\n        output_dir : str | Path\n            Output directory path\n        \"\"\"\n        output_dir = Path(output_dir)\n        if not output_dir.is_dir():\n            raise FileNotFoundError(f\"Output directory not found: {output_dir}\")\n\n        snapshot_files = sorted(output_dir.glob(\"snapshot_*.csv\"))\n        for snapshot_file in snapshot_files:\n            snapshot_file.unlink()\n\n    def compute_energy(\n        self: ctypes.CDLL, sol_state: np.ndarray, G: float\n    ) -&gt; np.ndarray:\n        \"\"\"Compute the total energy of the system\n\n        Parameters\n        ----------\n        sol_state : np.ndarray\n            3D array of solution state for each snapshot, with shape\n            (num_snapshots, num_particles, 7) being\n            [m, x, y, z, vx, vy, vz]\n        G : float\n            Gravitational constant\n\n        Returns\n        -------\n        energy : np.ndarray\n            1D array of total energy for each snapshot\n        \"\"\"\n        # Check the dimension and shape of sol_state\n        if len(sol_state.shape) != 3:\n            raise ValueError(\"sol_state must be a 3D array\")\n\n        if sol_state.shape[2] != 7:\n            raise ValueError(\n                \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n            )\n\n        # Compute the total energy\n        energy = np.zeros(sol_state.shape[0], dtype=np.float64)\n        self.c_lib.compute_energy_python(\n            energy.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            ctypes.c_double(G),\n            sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            ctypes.c_int32(sol_state.shape[0]),\n            ctypes.c_int32(sol_state.shape[1]),\n        )\n\n        return energy\n\n    def compute_linear_momentum(\n        self: ctypes.CDLL, sol_state: np.ndarray,\n    ) -&gt; np.ndarray:\n        \"\"\"Compute the total linear_momentum of the system\n\n        Parameters\n        ----------\n        sol_state : np.ndarray\n            3D array of solution state for each snapshot, with shape\n            (num_snapshots, num_particles, 7) being\n            [m, x, y, z, vx, vy, vz]\n\n        Returns\n        -------\n        linear_momentum : np.ndarray\n            1D array of total linear_momentum for each snapshot\n        \"\"\"\n        # Check the dimension and shape of sol_state\n        if len(sol_state.shape) != 3:\n            raise ValueError(\"sol_state must be a 3D array\")\n\n        if sol_state.shape[2] != 7:\n            raise ValueError(\n                \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n            )\n\n        # Compute the total energy\n        linear_momentum = np.zeros(sol_state.shape[0], dtype=np.float64)\n        self.c_lib.compute_linear_momentum_python(\n            linear_momentum.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            ctypes.c_int32(sol_state.shape[0]),\n            ctypes.c_int32(sol_state.shape[1]),\n        )\n\n        return linear_momentum\n\n    def compute_angular_momentum(\n        self: ctypes.CDLL, sol_state: np.ndarray,\n    ) -&gt; np.ndarray:\n        \"\"\"Compute the total angular_momentum of the system\n\n        Parameters\n        ----------\n        sol_state : np.ndarray\n            3D array of solution state for each snapshot, with shape\n            (num_snapshots, num_particles, 7) being\n            [m, x, y, z, vx, vy, vz]\n\n        Returns\n        -------\n        angular_momentum : np.ndarray\n            1D array of total angular_momentum for each snapshot\n        \"\"\"\n        # Check the dimension and shape of sol_state\n        if len(sol_state.shape) != 3:\n            raise ValueError(\"sol_state must be a 3D array\")\n\n        if sol_state.shape[2] != 7:\n            raise ValueError(\n                \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n            )\n\n        # Compute the total energy\n        angular_momentum = np.zeros(sol_state.shape[0], dtype=np.float64)\n        self.c_lib.compute_angular_momentum_python(\n            angular_momentum.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n            ctypes.c_int32(sol_state.shape[0]),\n            ctypes.c_int32(sol_state.shape[1]),\n        )\n\n        return angular_momentum\n\n    @staticmethod\n    def compute_eccentricity(\n        G: float,\n        sol_state: np.ndarray,\n    ) -&gt; np.ndarray:\n        \"\"\"Compute the eccentricity using the sol_state array,\n        assuming that the first object is the central object\n\n        Parameters\n        ----------\n        G : float\n            Gravitational constant\n        sol_state : np.ndarray\n            Solution state of the system\n\n        Returns\n        -------\n        np.ndarray\n            Eccentricity of the system at each time step,\n            with shape (num_snapshots, num_particles - 1)\n\n        Notes\n        -----\n        - The function assumes that the first object is the central object.\n        - C library function is not used here since this can be done with\n            purely numpy vectorized operations. Nevertheless, we may consider\n            implementing this in C library in the future.\n        \"\"\"\n        num_snapshots = sol_state.shape[0]\n        m_0 = sol_state[0, 0, 0]\n        m = sol_state[0, 1:, 0]\n\n        eccentricity = np.zeros(num_snapshots)\n\n        x = sol_state[:, 1:, 1:4].copy() - sol_state[:, 0, 1:4].reshape(-1, 1, 3)\n        v = sol_state[:, 1:, 4:7].copy() - sol_state[:, 0, 4:7].reshape(-1, 1, 3)\n\n        denom = G * (m_0 + m)[np.newaxis, :, np.newaxis]\n        eccentricity = (\n            np.cross(v, np.cross(x, v)) / denom\n            - x / np.linalg.norm(x, axis=2)[:, :, np.newaxis]\n        )\n        eccentricity = np.linalg.norm(eccentricity, axis=2)\n\n        return eccentricity\n\n    @staticmethod\n    def compute_inclination(sol_state: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Compute the inclination using the sol_state array,\n        assuming that the first object is the central object\n\n        Parameters\n        ----------\n        sol_state : np.ndarray\n            Solution state of the system\n\n        Returns\n        -------\n        np.ndarray\n            Inclination of the system at each time step, \n            with shape (num_snapshots, num_particles - 1)\n\n        Notes\n        -----\n        - The function assumes that the first object is the central object.\n        - C library function is not used here since this can be done with\n          purely numpy vectorized operations. Nevertheless, we may consider\n          implementing this in C library in the future.\n        \"\"\"\n        num_snapshots = sol_state.shape[0]\n\n        inclination = np.zeros(num_snapshots)\n\n        x = sol_state[:, 1:, 1:4].copy() - sol_state[:, 0, 1:4].reshape(-1, 1, 3)\n        v = sol_state[:, 1:, 4:7].copy() - sol_state[:, 0, 4:7].reshape(-1, 1, 3)\n\n        unit_angular_momentum_vector = (\n            np.cross(x, v) / np.linalg.norm(np.cross(x, v), axis=2)[:, :, np.newaxis]\n        )\n        unit_z = np.array([0, 0, 1])\n\n        inclination = np.arccos(np.sum(unit_angular_momentum_vector * unit_z, axis=2))\n\n        return inclination\n\n    @staticmethod\n    def plot_rel_energy_error(\n        sol_energy: np.ndarray,\n        sol_time: np.ndarray,\n        is_log_y: bool = True,\n        title: Optional[str] = None,\n        xlabel: Optional[str] = \"Time\",\n        ylabel: Optional[str] = \"$(E_0 - E(t)) / E_0$\",\n        save_fig: bool = False,\n        save_fig_path: Optional[str | Path] = None,\n    ) -&gt; None:\n        if sol_energy[0] == 0.0:\n            warnings.warn(\"The initial energy is zero.\")\n        rel_energy_error = np.abs((sol_energy - sol_energy[0]) / sol_energy[0])\n        plotting.plot_quantity_against_time(\n            quantity=rel_energy_error,\n            sol_time=sol_time,\n            title=title,\n            xlabel=xlabel,\n            ylabel=ylabel,\n            is_log_y=is_log_y,\n            save_fig=save_fig,\n            save_fig_path=save_fig_path,\n        )\n\n    @staticmethod\n    def plot_rel_linear_momentum_error(\n        sol_linear_momentum: np.ndarray,\n        sol_time: np.ndarray,\n        is_log_y: bool = True,\n        title: Optional[str] = None,\n        xlabel: Optional[str] = \"Time\",\n        ylabel: Optional[str] = \"Relative linear momentum error\",\n        save_fig: bool = False,\n        save_fig_path: Optional[str | Path] = None,\n    ) -&gt; None:\n        if sol_linear_momentum[0] == 0.0:\n            warnings.warn(\"The initial linear momentum is zero.\")\n        rel_linear_momentum_error = np.abs(\n            (sol_linear_momentum - sol_linear_momentum[0]) / sol_linear_momentum[0]\n        )\n        plotting.plot_quantity_against_time(\n            quantity=rel_linear_momentum_error,\n            sol_time=sol_time,\n            title=title,\n            xlabel=xlabel,\n            ylabel=ylabel,\n            is_log_y=is_log_y,\n            save_fig=save_fig,\n            save_fig_path=save_fig_path,\n        )\n\n    @staticmethod\n    def plot_rel_angular_momentum_error(\n        sol_angular_momentum: np.ndarray,\n        sol_time: np.ndarray,\n        is_log_y: bool = True,\n        title: Optional[str] = None,\n        xlabel: Optional[str] = \"Time\",\n        ylabel: Optional[str] = \"$(L_0 - L(t)) / L_0$\",\n        save_fig: bool = False,\n        save_fig_path: Optional[str | Path] = None,\n    ) -&gt; None:\n        if sol_angular_momentum[0] == 0.0:\n            warnings.warn(\"The initial angular momentum is zero.\")\n        angular_momentum_error = np.abs(\n            (sol_angular_momentum - sol_angular_momentum[0]) / sol_angular_momentum[0]\n        )\n        plotting.plot_quantity_against_time(\n            quantity=angular_momentum_error,\n            sol_time=sol_time,\n            title=title,\n            xlabel=xlabel,\n            ylabel=ylabel,\n            is_log_y=is_log_y,\n            save_fig=save_fig,\n            save_fig_path=save_fig_path,\n        )\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.__init__","title":"<code>__init__(c_lib_path=None)</code>","text":"<p>Initialize gravity simulator API</p> <p>Parameters:</p> Name Type Description Default <code>c_lib_path</code> <code>str</code> <p>Path to C library, by default None</p> <code>None</code> Source code in <code>grav_sim/api.py</code> <pre><code>def __init__(self, c_lib_path: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Initialize gravity simulator API\n\n    Parameters\n    ----------\n    c_lib_path : str, optional\n        Path to C library, by default None\n    \"\"\"\n    if c_lib_path is not None:\n        self.c_lib = utils.load_c_lib(Path(c_lib_path))\n    else:\n        self.c_lib = utils.load_c_lib()\n    utils.initialize_c_lib(self.c_lib)\n\n    # System\n    self.BUILT_IN_SYSTEMS = System.BUILT_IN_SYSTEMS\n\n    # Plotting\n    self.SOLAR_SYSTEM_COLORS = plotting.SOLAR_SYSTEM_COLORS\n    self.plot_quantity_against_time = plotting.plot_quantity_against_time\n    self.plot_2d_trajectory = plotting.plot_2d_trajectory\n    self.plot_3d_trajectory = plotting.plot_3d_trajectory\n\n    # Simulator\n    self.simulator = Simulator(c_lib=self.c_lib)\n    self.DAYS_PER_YEAR = self.simulator.DAYS_PER_YEAR\n    self.launch_simulation = self.simulator.launch_simulation\n\n    # Parameters\n    self.AVAILABLE_ACCELERATION_METHODS = parameters.AccelerationParam.AVAILABLE_ACCELERATION_METHODS\n    self.AVAILABLE_INTEGRATORS = parameters.IntegratorParam.AVAILABLE_INTEGRATORS\n    self.FIXED_STEP_SIZE_INTEGRATORS = parameters.IntegratorParam.FIXED_STEP_SIZE_INTEGRATORS\n    self.ADAPTIVE_STEP_SIZE_INTEGRATORS = parameters.IntegratorParam.ADAPTIVE_STEP_SIZE_INTEGRATORS\n    self.AVAILABLE_OUTPUT_METHODS = parameters.OutputParam.AVAILABLE_OUTPUT_METHODS\n    self.AVAILABLE_OUTPUT_DTYPE = parameters.OutputParam.AVAILABLE_OUTPUT_DTYPE\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.compute_angular_momentum","title":"<code>compute_angular_momentum(sol_state)</code>","text":"<p>Compute the total angular_momentum of the system</p> <p>Parameters:</p> Name Type Description Default <code>sol_state</code> <code>ndarray</code> <p>3D array of solution state for each snapshot, with shape (num_snapshots, num_particles, 7) being [m, x, y, z, vx, vy, vz]</p> required <p>Returns:</p> Name Type Description <code>angular_momentum</code> <code>ndarray</code> <p>1D array of total angular_momentum for each snapshot</p> Source code in <code>grav_sim/api.py</code> <pre><code>def compute_angular_momentum(\n    self: ctypes.CDLL, sol_state: np.ndarray,\n) -&gt; np.ndarray:\n    \"\"\"Compute the total angular_momentum of the system\n\n    Parameters\n    ----------\n    sol_state : np.ndarray\n        3D array of solution state for each snapshot, with shape\n        (num_snapshots, num_particles, 7) being\n        [m, x, y, z, vx, vy, vz]\n\n    Returns\n    -------\n    angular_momentum : np.ndarray\n        1D array of total angular_momentum for each snapshot\n    \"\"\"\n    # Check the dimension and shape of sol_state\n    if len(sol_state.shape) != 3:\n        raise ValueError(\"sol_state must be a 3D array\")\n\n    if sol_state.shape[2] != 7:\n        raise ValueError(\n            \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n        )\n\n    # Compute the total energy\n    angular_momentum = np.zeros(sol_state.shape[0], dtype=np.float64)\n    self.c_lib.compute_angular_momentum_python(\n        angular_momentum.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        ctypes.c_int32(sol_state.shape[0]),\n        ctypes.c_int32(sol_state.shape[1]),\n    )\n\n    return angular_momentum\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.compute_eccentricity","title":"<code>compute_eccentricity(G, sol_state)</code>  <code>staticmethod</code>","text":"<p>Compute the eccentricity using the sol_state array, assuming that the first object is the central object</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>float</code> <p>Gravitational constant</p> required <code>sol_state</code> <code>ndarray</code> <p>Solution state of the system</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Eccentricity of the system at each time step, with shape (num_snapshots, num_particles - 1)</p> Notes <ul> <li>The function assumes that the first object is the central object.</li> <li>C library function is not used here since this can be done with     purely numpy vectorized operations. Nevertheless, we may consider     implementing this in C library in the future.</li> </ul> Source code in <code>grav_sim/api.py</code> <pre><code>@staticmethod\ndef compute_eccentricity(\n    G: float,\n    sol_state: np.ndarray,\n) -&gt; np.ndarray:\n    \"\"\"Compute the eccentricity using the sol_state array,\n    assuming that the first object is the central object\n\n    Parameters\n    ----------\n    G : float\n        Gravitational constant\n    sol_state : np.ndarray\n        Solution state of the system\n\n    Returns\n    -------\n    np.ndarray\n        Eccentricity of the system at each time step,\n        with shape (num_snapshots, num_particles - 1)\n\n    Notes\n    -----\n    - The function assumes that the first object is the central object.\n    - C library function is not used here since this can be done with\n        purely numpy vectorized operations. Nevertheless, we may consider\n        implementing this in C library in the future.\n    \"\"\"\n    num_snapshots = sol_state.shape[0]\n    m_0 = sol_state[0, 0, 0]\n    m = sol_state[0, 1:, 0]\n\n    eccentricity = np.zeros(num_snapshots)\n\n    x = sol_state[:, 1:, 1:4].copy() - sol_state[:, 0, 1:4].reshape(-1, 1, 3)\n    v = sol_state[:, 1:, 4:7].copy() - sol_state[:, 0, 4:7].reshape(-1, 1, 3)\n\n    denom = G * (m_0 + m)[np.newaxis, :, np.newaxis]\n    eccentricity = (\n        np.cross(v, np.cross(x, v)) / denom\n        - x / np.linalg.norm(x, axis=2)[:, :, np.newaxis]\n    )\n    eccentricity = np.linalg.norm(eccentricity, axis=2)\n\n    return eccentricity\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.compute_energy","title":"<code>compute_energy(sol_state, G)</code>","text":"<p>Compute the total energy of the system</p> <p>Parameters:</p> Name Type Description Default <code>sol_state</code> <code>ndarray</code> <p>3D array of solution state for each snapshot, with shape (num_snapshots, num_particles, 7) being [m, x, y, z, vx, vy, vz]</p> required <code>G</code> <code>float</code> <p>Gravitational constant</p> required <p>Returns:</p> Name Type Description <code>energy</code> <code>ndarray</code> <p>1D array of total energy for each snapshot</p> Source code in <code>grav_sim/api.py</code> <pre><code>def compute_energy(\n    self: ctypes.CDLL, sol_state: np.ndarray, G: float\n) -&gt; np.ndarray:\n    \"\"\"Compute the total energy of the system\n\n    Parameters\n    ----------\n    sol_state : np.ndarray\n        3D array of solution state for each snapshot, with shape\n        (num_snapshots, num_particles, 7) being\n        [m, x, y, z, vx, vy, vz]\n    G : float\n        Gravitational constant\n\n    Returns\n    -------\n    energy : np.ndarray\n        1D array of total energy for each snapshot\n    \"\"\"\n    # Check the dimension and shape of sol_state\n    if len(sol_state.shape) != 3:\n        raise ValueError(\"sol_state must be a 3D array\")\n\n    if sol_state.shape[2] != 7:\n        raise ValueError(\n            \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n        )\n\n    # Compute the total energy\n    energy = np.zeros(sol_state.shape[0], dtype=np.float64)\n    self.c_lib.compute_energy_python(\n        energy.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        ctypes.c_double(G),\n        sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        ctypes.c_int32(sol_state.shape[0]),\n        ctypes.c_int32(sol_state.shape[1]),\n    )\n\n    return energy\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.compute_inclination","title":"<code>compute_inclination(sol_state)</code>  <code>staticmethod</code>","text":"<p>Compute the inclination using the sol_state array, assuming that the first object is the central object</p> <p>Parameters:</p> Name Type Description Default <code>sol_state</code> <code>ndarray</code> <p>Solution state of the system</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Inclination of the system at each time step,  with shape (num_snapshots, num_particles - 1)</p> Notes <ul> <li>The function assumes that the first object is the central object.</li> <li>C library function is not used here since this can be done with   purely numpy vectorized operations. Nevertheless, we may consider   implementing this in C library in the future.</li> </ul> Source code in <code>grav_sim/api.py</code> <pre><code>@staticmethod\ndef compute_inclination(sol_state: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Compute the inclination using the sol_state array,\n    assuming that the first object is the central object\n\n    Parameters\n    ----------\n    sol_state : np.ndarray\n        Solution state of the system\n\n    Returns\n    -------\n    np.ndarray\n        Inclination of the system at each time step, \n        with shape (num_snapshots, num_particles - 1)\n\n    Notes\n    -----\n    - The function assumes that the first object is the central object.\n    - C library function is not used here since this can be done with\n      purely numpy vectorized operations. Nevertheless, we may consider\n      implementing this in C library in the future.\n    \"\"\"\n    num_snapshots = sol_state.shape[0]\n\n    inclination = np.zeros(num_snapshots)\n\n    x = sol_state[:, 1:, 1:4].copy() - sol_state[:, 0, 1:4].reshape(-1, 1, 3)\n    v = sol_state[:, 1:, 4:7].copy() - sol_state[:, 0, 4:7].reshape(-1, 1, 3)\n\n    unit_angular_momentum_vector = (\n        np.cross(x, v) / np.linalg.norm(np.cross(x, v), axis=2)[:, :, np.newaxis]\n    )\n    unit_z = np.array([0, 0, 1])\n\n    inclination = np.arccos(np.sum(unit_angular_momentum_vector * unit_z, axis=2))\n\n    return inclination\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.compute_linear_momentum","title":"<code>compute_linear_momentum(sol_state)</code>","text":"<p>Compute the total linear_momentum of the system</p> <p>Parameters:</p> Name Type Description Default <code>sol_state</code> <code>ndarray</code> <p>3D array of solution state for each snapshot, with shape (num_snapshots, num_particles, 7) being [m, x, y, z, vx, vy, vz]</p> required <p>Returns:</p> Name Type Description <code>linear_momentum</code> <code>ndarray</code> <p>1D array of total linear_momentum for each snapshot</p> Source code in <code>grav_sim/api.py</code> <pre><code>def compute_linear_momentum(\n    self: ctypes.CDLL, sol_state: np.ndarray,\n) -&gt; np.ndarray:\n    \"\"\"Compute the total linear_momentum of the system\n\n    Parameters\n    ----------\n    sol_state : np.ndarray\n        3D array of solution state for each snapshot, with shape\n        (num_snapshots, num_particles, 7) being\n        [m, x, y, z, vx, vy, vz]\n\n    Returns\n    -------\n    linear_momentum : np.ndarray\n        1D array of total linear_momentum for each snapshot\n    \"\"\"\n    # Check the dimension and shape of sol_state\n    if len(sol_state.shape) != 3:\n        raise ValueError(\"sol_state must be a 3D array\")\n\n    if sol_state.shape[2] != 7:\n        raise ValueError(\n            \"sol_state must have shape (num_snapshots, num_particles, 7)\"\n        )\n\n    # Compute the total energy\n    linear_momentum = np.zeros(sol_state.shape[0], dtype=np.float64)\n    self.c_lib.compute_linear_momentum_python(\n        linear_momentum.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        sol_state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\n        ctypes.c_int32(sol_state.shape[0]),\n        ctypes.c_int32(sol_state.shape[1]),\n    )\n\n    return linear_momentum\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.delete_snapshots","title":"<code>delete_snapshots(output_dir)</code>  <code>staticmethod</code>","text":"<p>Delete all snapshots in the output directory</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str | Path</code> <p>Output directory path</p> required Source code in <code>grav_sim/api.py</code> <pre><code>@staticmethod\ndef delete_snapshots(\n    output_dir: str | Path,\n):\n    \"\"\"Delete all snapshots in the output directory\n\n    Parameters\n    ----------\n    output_dir : str | Path\n        Output directory path\n    \"\"\"\n    output_dir = Path(output_dir)\n    if not output_dir.is_dir():\n        raise FileNotFoundError(f\"Output directory not found: {output_dir}\")\n\n    snapshot_files = sorted(output_dir.glob(\"snapshot_*.csv\"))\n    for snapshot_file in snapshot_files:\n        snapshot_file.unlink()\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.get_built_in_system","title":"<code>get_built_in_system(system_name)</code>","text":"<p>Get a built-in gravitational system</p> <p>Parameters:</p> Name Type Description Default <code>system_name</code> <code>str</code> <p>Name of the built-in system to be loaded.</p> required Source code in <code>grav_sim/api.py</code> <pre><code>def get_built_in_system(self, system_name: str) -&gt; System:\n    \"\"\"Get a built-in gravitational system\n\n    Parameters\n    ----------\n    system_name : str\n        Name of the built-in system to be loaded.\n    \"\"\"\n    return System.get_built_in_system(self.c_lib, system_name)\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.get_new_parameters","title":"<code>get_new_parameters()</code>  <code>staticmethod</code>","text":"<p>Create new simulation parameters</p> <p>Returns:</p> Type Description <code>Tuple of acceleration, integrator, output, and settings parameters</code> Source code in <code>grav_sim/api.py</code> <pre><code>@staticmethod\ndef get_new_parameters() -&gt; Tuple[\n    parameters.AccelerationParam,\n    parameters.IntegratorParam,\n    parameters.OutputParam,\n    parameters.Settings,\n]:\n    \"\"\"Create new simulation parameters\n\n    Returns\n    -------\n    Tuple of acceleration, integrator, output, and settings parameters\n    \"\"\"\n    acceleration_param = parameters.AccelerationParam()\n    integrator_param = parameters.IntegratorParam()\n    output_param = parameters.OutputParam()\n    settings = parameters.Settings()\n\n    return acceleration_param, integrator_param, output_param, settings\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.get_new_system","title":"<code>get_new_system()</code>","text":"<p>Create a gravitational system</p> <p>Returns:</p> Type Description <code>System object</code> Source code in <code>grav_sim/api.py</code> <pre><code>def get_new_system(self) -&gt; System:\n    \"\"\"Create a gravitational system\n\n    Returns\n    -------\n    System object\n    \"\"\"\n    return System(c_lib=self.c_lib)\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.load_system","title":"<code>load_system(file_path)</code>","text":"<p>Load system from a CSV file</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path to load the system from</p> required Source code in <code>grav_sim/api.py</code> <pre><code>def load_system(\n    self,\n    file_path: str | Path,\n) -&gt; System:\n    \"\"\"Load system from a CSV file\n\n    Parameters\n    ----------\n    file_path : str\n        File path to load the system from\n    \"\"\"\n    return System.load_system(self.c_lib, file_path)\n</code></pre>"},{"location":"docs/documentations/PythonAPI/GravitySimulatorAPI/#grav_sim.GravitySimulatorAPI.read_csv_data","title":"<code>read_csv_data(output_dir)</code>  <code>staticmethod</code>","text":"<p>Read CSV snapshots from the output directory, assuming number of particles and particle_ids stays the same</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str | Path</code> <p>Output directory path</p> required <p>Returns:</p> Name Type Description <code>G</code> <code>float</code> <p>Gravitational constant</p> <code>time</code> <code>ndarray</code> <p>Simulation time of each snapshot</p> <code>dt</code> <code>ndarray</code> <p>Time step of each snapshot</p> <code>particle_ids</code> <code>ndarray</code> <p>1D array of Particle IDs</p> <code>sol_state</code> <code>ndarray</code> <p>3D array of solution state for each snapshot, with shape (num_snapshots, num_particles, 7) being [m, x, y, z, vx, vy, vz]</p> Source code in <code>grav_sim/api.py</code> <pre><code>@staticmethod\ndef read_csv_data(\n    output_dir: str | Path,\n) -&gt; Tuple[float, np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Read CSV snapshots from the output directory,\n    assuming number of particles and particle_ids\n    stays the same\n\n    Parameters\n    ----------\n    output_dir : str | Path\n        Output directory path\n\n    Returns\n    -------\n    G : float\n        Gravitational constant\n    time : np.ndarray\n        Simulation time of each snapshot\n    dt : np.ndarray\n        Time step of each snapshot\n    particle_ids : np.ndarray\n        1D array of Particle IDs\n    sol_state : np.ndarray\n        3D array of solution state for each snapshot, with shape\n        (num_snapshots, num_particles, 7) being\n        [m, x, y, z, vx, vy, vz]\n    \"\"\"\n    output_dir = Path(output_dir)\n    if not output_dir.is_dir():\n        raise FileNotFoundError(f\"Output directory not found: {output_dir}\")\n\n    snapshot_files = sorted(output_dir.glob(\"snapshot_*.csv\"))\n    if len(snapshot_files) == 0:\n        raise FileNotFoundError(f\"No snapshot files found in: {output_dir}\")\n\n    G = -1.0\n    time = np.zeros(len(snapshot_files), dtype=np.float64)\n    dt = np.zeros(len(snapshot_files), dtype=np.float64)\n\n    for i, snapshot_file in enumerate(snapshot_files):\n        # Read the metadata\n        with open(snapshot_file, \"r\") as file:\n            read_metadata_num_particles = False\n            read_metadata_G = False\n            read_metadata_time = False\n            read_metadata_dt = False\n            for line in file:\n                line = line.strip()\n\n                if line.startswith(\"#\"):\n                    if line.startswith(\"# num_particles\"):\n                        if i == 0:\n                            num_particles = int(line.split(\":\")[1].strip())\n                        elif num_particles != int(line.split(\":\")[1].strip()):\n                            raise ValueError(\n                                f\"Number of particles changed from {num_particles} to {int(line.split(':')[1].strip())}\"\n                            )\n                        read_metadata_num_particles = True\n                    elif line.startswith(\"# G\"):\n                        G = float(line.split(\":\")[1].strip())\n                        read_metadata_G = True\n                    elif line.startswith(\"# time\"):\n                        time[i] = float(line.split(\":\")[1].strip())\n                        read_metadata_time = True\n                    elif line.startswith(\"# dt\"):\n                        dt[i] = float(line.split(\":\")[1].strip())\n                        read_metadata_dt = True\n\n                if (\n                    read_metadata_num_particles\n                    and read_metadata_G\n                    and read_metadata_time\n                    and read_metadata_dt\n                ):\n                    break\n\n    # Read the data\n    particle_ids = np.zeros(num_particles, dtype=np.int32)\n    sol_state = np.zeros((len(snapshot_files), num_particles, 7), dtype=np.float64)\n    for i, snapshot_file in enumerate(snapshot_files):\n        data = np.genfromtxt(snapshot_file, delimiter=\",\", skip_header=5)\n        if i == 0:\n            particle_ids = data[:, 0].astype(np.int32)\n            particle_ids = np.sort(particle_ids)\n            _, num_duplicates = np.unique(particle_ids, return_counts=True)\n            if np.any(num_duplicates &gt; 1):\n                raise ValueError(f\"Particle IDs are not unique. Particle IDs: {particle_ids}\")\n\n        snapshot_particle_ids = data[:, 0].astype(np.int32)\n\n        # Sort the data by particle IDs\n        sorted_indices = np.argsort(snapshot_particle_ids)\n        data = data[sorted_indices]\n\n        # Check if the particle IDs match\n        if not np.array_equal(particle_ids, snapshot_particle_ids):\n            raise ValueError(\n                f\"Particle IDs do not match in snapshot {i + 1}: {snapshot_file}\"\n            )\n\n        # Store the data\n        sol_state[i, :, :] = data[:, 1:]\n\n    return G, time, dt, particle_ids, sol_state\n</code></pre>"},{"location":"docs/documentations/PythonAPI/parameters/","title":"Parameters","text":""},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam","title":"<code>AccelerationParam</code>","text":"<p>Acceleration parameters for gravity simulation</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>Acceleration method</p> <code>softening_length</code> <code>float</code> <p>Softening length for acceleration</p> <code>pm_grid_size</code> <code>int</code> <p>Grid size for Particle Mesh method</p> <code>opening_angle</code> <code>float</code> <p>Opening angle for Barnes-Hut method</p> <code>max_num_particles_per_leaf</code> <code>int</code> <p>Maximum number of particles per leaf for Barnes-Hut method</p> Source code in <code>grav_sim/parameters.py</code> <pre><code>class AccelerationParam:\n    \"\"\"Acceleration parameters for gravity simulation\n\n    Attributes\n    ----------\n    method : str\n        Acceleration method\n    softening_length : float\n        Softening length for acceleration\n    pm_grid_size : int\n        Grid size for Particle Mesh method\n    opening_angle : float\n        Opening angle for Barnes-Hut method\n    max_num_particles_per_leaf : int\n        Maximum number of particles per leaf for Barnes-Hut method\n    \"\"\"\n\n    AVAILABLE_ACCELERATION_METHODS = [\n        \"pairwise\",\n        \"massless\",\n        \"barnes_hut\",\n        \"particle_mesh\",\n    ]\n    ACCELERATION_METHODS_TO_ENCODING = {\n        \"pairwise\": 1,\n        \"massless\": 2,\n        \"barnes_hut\": 3,\n        \"particle_mesh\": 4,\n    }\n    ACCELERATION_ENCODING_TO_METHODS = {\n        v: k for k, v in ACCELERATION_METHODS_TO_ENCODING.items()\n    }\n\n    def __init__(self) -&gt; None:\n        self.method = \"pairwise\"\n        self.opening_angle = 1.0\n        self.softening_length = 0.0\n        self.pm_grid_size = 128\n        self.max_num_particles_per_leaf = 1\n\n    @property\n    def method(self) -&gt; str:\n        \"\"\"Get the acceleration method\"\"\"\n        return self.ACCELERATION_ENCODING_TO_METHODS[self._method]\n\n    @method.setter\n    def method(self, value: str) -&gt; None:\n        \"\"\"Set the acceleration method\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_ACCELERATION_METHODS:\n            raise ValueError(\n                f\"Invalid acceleration method: {value}. Available methods: {self.AVAILABLE_ACCELERATION_METHODS}\"\n            )\n        self._method: int = self.ACCELERATION_METHODS_TO_ENCODING[value]\n\n    @property\n    def opening_angle(self) -&gt; float:\n        \"\"\"Get the opening angle for Barnes-Hut method\"\"\"\n        return self._opening_angle\n\n    @opening_angle.setter\n    def opening_angle(self, value: float) -&gt; None:\n        \"\"\"Set the opening angle for Barnes-Hut method\"\"\"\n        value = float(value)\n        if value &lt;= 0:\n            raise ValueError(f\"Invalid opening angle: {value}. Must be positive.\")\n        self._opening_angle = value\n\n    @property\n    def softening_length(self) -&gt; float:\n        \"\"\"Get the softening length\"\"\"\n        return self._softening_length\n\n    @softening_length.setter\n    def softening_length(self, value: float) -&gt; None:\n        \"\"\"Set the softening length\"\"\"\n        value = float(value)\n        if value &lt; 0:\n            raise ValueError(\n                f\"Invalid softening length: {value}. Must be non-negative.\"\n            )\n        self._softening_length = value\n\n    @property\n    def pm_grid_size(self) -&gt; int:\n        \"\"\"Get the grid size for Particle Mesh method\"\"\"\n        return self._pm_grid_size\n\n    @pm_grid_size.setter\n    def pm_grid_size(self, value: int) -&gt; None:\n        \"\"\"Set the grid size for Particle Mesh method\"\"\"\n        value = int(value)\n        if value &lt;= 0:\n            raise ValueError(f\"Invalid grid size: {value}. Must be positive.\")\n        self._pm_grid_size = value\n\n    @property\n    def max_num_particles_per_leaf(self) -&gt; int:\n        \"\"\"Get the maximum number of particles per leaf for Barnes-Hut method\"\"\"\n        return self._max_num_particles_per_leaf\n\n    @max_num_particles_per_leaf.setter\n    def max_num_particles_per_leaf(self, value: int) -&gt; None:\n        \"\"\"Set the maximum number of particles per leaf for Barnes-Hut method\"\"\"\n        value = int(value)\n        if value &lt;= 0:\n            raise ValueError(\n                f\"Invalid maximum number of particles per leaf: {value}. Must be positive.\"\n            )\n        self._max_num_particles_per_leaf = value\n</code></pre>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam.max_num_particles_per_leaf","title":"<code>max_num_particles_per_leaf</code>  <code>property</code> <code>writable</code>","text":"<p>Get the maximum number of particles per leaf for Barnes-Hut method</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam.method","title":"<code>method</code>  <code>property</code> <code>writable</code>","text":"<p>Get the acceleration method</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam.opening_angle","title":"<code>opening_angle</code>  <code>property</code> <code>writable</code>","text":"<p>Get the opening angle for Barnes-Hut method</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam.pm_grid_size","title":"<code>pm_grid_size</code>  <code>property</code> <code>writable</code>","text":"<p>Get the grid size for Particle Mesh method</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.AccelerationParam.softening_length","title":"<code>softening_length</code>  <code>property</code> <code>writable</code>","text":"<p>Get the softening length</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam","title":"<code>IntegratorParam</code>","text":"<p>Integrator parameters for gravity simulation</p> <p>Attributes:</p> Name Type Description <code>integrator</code> <code>str</code> <p>Integrator</p> <code>dt</code> <code>float</code> <p>Time step</p> <code>tolerance</code> <code>float</code> <p>Tolerance for adaptive step size integrators</p> <code>initial_dt</code> <code>float</code> <p>Initial time step for adaptive step size integrators</p> <code>whfast_remove_invalid_particles</code> <code>bool</code> <p>Flag to indicate whether to remove invalid particles in WHFast integrator</p> Source code in <code>grav_sim/parameters.py</code> <pre><code>class IntegratorParam:\n    \"\"\"Integrator parameters for gravity simulation\n\n    Attributes\n    ----------\n    integrator : str\n        Integrator\n    dt : float\n        Time step\n    tolerance : float\n        Tolerance for adaptive step size integrators\n    initial_dt : float\n        Initial time step for adaptive step size integrators\n    whfast_remove_invalid_particles : bool\n        Flag to indicate whether to remove invalid particles in WHFast integrator\n    \"\"\"\n\n    AVAILABLE_INTEGRATORS = [\n        \"euler\",\n        \"euler_cromer\",\n        \"rk4\",\n        \"leapfrog\",\n        \"rkf45\",\n        \"dopri\",\n        \"dverk\",\n        \"rkf78\",\n        \"ias15\",\n        \"whfast\",\n    ]\n    FIXED_STEP_SIZE_INTEGRATORS = [\"euler\", \"euler_cromer\", \"rk4\", \"leapfrog\", \"whfast\"]\n    ADAPTIVE_STEP_SIZE_INTEGRATORS = [\"rkf45\", \"dopri\", \"dverk\", \"rkf78\", \"ias15\"]\n\n    INTEGRATOR_TO_ENCODING = {\n        \"euler\": 1,\n        \"euler_cromer\": 2,\n        \"rk4\": 3,\n        \"leapfrog\": 4,\n        \"rkf45\": 5,\n        \"dopri\": 6,\n        \"dverk\": 7,\n        \"rkf78\": 8,\n        \"ias15\": 9,\n        \"whfast\": 10,\n    }\n    ENCODING_TO_INTEGRATORS = {k: v for v, k in INTEGRATOR_TO_ENCODING.items()}\n\n    # Recommended settings for built-in systems with IAS15 integrator\n    RECOMMENDED_IAS15_SETTINGS_BUILT_IN_SYSTEMS = {\n        # \"template\": [\"tf\", \"tf unit\", \"tolerance\", \"storing_freq\"],\n        \"circular_binary_orbit\": [50.0, \"days\", 1e-9, 1],\n        \"eccentric_binary_orbit\": [2.6, \"years\", 1e-9, 1],\n        \"3d_helix\": [20.0, \"days\", 1e-9, 1],\n        \"sun_earth_moon\": [1.0, \"years\", 1e-9, 1],\n        \"figure-8\": [20.0, \"days\", 1e-9, 1],\n        \"pyth-3-body\": [70.0, \"days\", 1e-9, 1],\n        \"solar_system\": [200.0, \"years\", 1e-9, 1],\n        \"solar_system_plus\": [250.0, \"years\", 1e-9, 1],\n    }\n\n    def __init__(self) -&gt; None:\n        self.integrator = \"euler\"\n        self.dt = -1.0\n        self.tolerance = -1.0\n        self.initial_dt = -1.0\n        self.whfast_remove_invalid_particles = True\n\n    @property\n    def integrator(self) -&gt; str:\n        \"\"\"Get the integrator\"\"\"\n        return self.ENCODING_TO_INTEGRATORS[self._integrator]\n\n    @integrator.setter\n    def integrator(self, value: str) -&gt; None:\n        \"\"\"Set the integrator\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_INTEGRATORS:\n            raise ValueError(\n                f\"Invalid integrator: {value}. Available integrators: {self.AVAILABLE_INTEGRATORS}\"\n            )\n        self._integrator: int = self.INTEGRATOR_TO_ENCODING[value]\n\n    @property\n    def dt(self) -&gt; float:\n        \"\"\"Get the time step size\"\"\"\n        return self._dt\n\n    @dt.setter\n    def dt(self, value: float) -&gt; None:\n        \"\"\"Set the time step size\"\"\"\n        self._dt = float(value)\n\n    @property\n    def tolerance(self) -&gt; float:\n        \"\"\"Get the tolerance for adaptive step size integrators\"\"\"\n        return self._tolerance\n\n    @tolerance.setter\n    def tolerance(self, value: float) -&gt; None:\n        \"\"\"Set the tolerance for adaptive step size integrators\"\"\"\n        self._tolerance = float(value)\n\n    @property\n    def initial_dt(self) -&gt; float:\n        \"\"\"Get the initial time step size for adaptive step size integrators\"\"\"\n        return self._initial_dt\n\n    @initial_dt.setter\n    def initial_dt(self, value: float) -&gt; None:\n        \"\"\"Set the initial time step size for adaptive step size integrators\"\"\"\n        self._initial_dt = float(value)\n\n    @property\n    def whfast_remove_invalid_particles(self) -&gt; bool:\n        \"\"\"Get the flag for removing invalid particles in WHFast integrator\"\"\"\n        return self._whfast_remove_invalid_particles\n\n    @whfast_remove_invalid_particles.setter\n    def whfast_remove_invalid_particles(self, value: bool) -&gt; None:\n        \"\"\"Set the flag for removing invalid particles in WHFast integrator\"\"\"\n        self._whfast_remove_invalid_particles = bool(value)\n</code></pre>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam.dt","title":"<code>dt</code>  <code>property</code> <code>writable</code>","text":"<p>Get the time step size</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam.initial_dt","title":"<code>initial_dt</code>  <code>property</code> <code>writable</code>","text":"<p>Get the initial time step size for adaptive step size integrators</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam.integrator","title":"<code>integrator</code>  <code>property</code> <code>writable</code>","text":"<p>Get the integrator</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam.tolerance","title":"<code>tolerance</code>  <code>property</code> <code>writable</code>","text":"<p>Get the tolerance for adaptive step size integrators</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.IntegratorParam.whfast_remove_invalid_particles","title":"<code>whfast_remove_invalid_particles</code>  <code>property</code> <code>writable</code>","text":"<p>Get the flag for removing invalid particles in WHFast integrator</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam","title":"<code>OutputParam</code>","text":"<p>Output parameters for gravity simulation</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>Output method</p> <code>output_dir</code> <code>str</code> <p>Output directory</p> <code>output_initial</code> <code>bool</code> <p>Flag to indicate whether to output initial state</p> <code>output_interval</code> <code>float</code> <p>Output interval</p> <code>coordinate_output_dtype</code> <code>str</code> <p>Data type for coordinate output</p> <code>velocity_output_dtype</code> <code>str</code> <p>Data type for velocity output</p> <code>mass_output_dtype</code> <code>str</code> <p>Data type for mass output</p> Source code in <code>grav_sim/parameters.py</code> <pre><code>class OutputParam:\n    \"\"\"Output parameters for gravity simulation\n\n    Attributes\n    ----------\n    method : str\n        Output method\n    output_dir : str\n        Output directory\n    output_initial : bool\n        Flag to indicate whether to output initial state\n    output_interval : float\n        Output interval\n    coordinate_output_dtype : str\n        Data type for coordinate output\n    velocity_output_dtype : str\n        Data type for velocity output\n    mass_output_dtype : str\n        Data type for mass output\n    \"\"\"\n\n    AVAILABLE_OUTPUT_METHODS = [\"disabled\", \"csv\", \"hdf5\"]\n    AVAILABLE_OUTPUT_DTYPE = [\"float\", \"double\"]\n\n    OUTPUT_METHODS_TO_ENCODING = {\n        \"disabled\": 1,\n        \"csv\": 2,\n        \"hdf5\": 3,\n    }\n    OUTPUT_ENCODING_TO_METHODS = {v: k for k, v in OUTPUT_METHODS_TO_ENCODING.items()}\n\n    OUTPUT_DTYPE_TO_ENCODING = {\n        \"float\": 1,\n        \"double\": 2,\n    }\n    OUTPUT_ENCODING_TO_DTYPE = {v: k for k, v in OUTPUT_DTYPE_TO_ENCODING.items()}\n\n    def __init__(self) -&gt; None:\n        self.method = \"disabled\"\n        self.output_dir = \"tmp/\"\n        self.output_initial = True\n        self.output_interval = 1.0\n        self.coordinate_output_dtype = \"double\"\n        self.velocity_output_dtype = \"double\"\n        self.mass_output_dtype = \"double\"\n\n    @property\n    def method(self) -&gt; str:\n        \"\"\"Get the output method\"\"\"\n        return self.OUTPUT_ENCODING_TO_METHODS[self._method]\n\n    @method.setter\n    def method(self, value: str) -&gt; None:\n        \"\"\"Set the output method\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_OUTPUT_METHODS:\n            raise ValueError(\n                f\"Invalid output method: {value}. Available methods: {self.AVAILABLE_OUTPUT_METHODS}\"\n            )\n        self._method: int = self.OUTPUT_METHODS_TO_ENCODING[value]\n\n    @property\n    def output_dir(self) -&gt; str:\n        \"\"\"Get the output directory\"\"\"\n        return self._output_dir\n\n    @output_dir.setter\n    def output_dir(self, value: str) -&gt; None:\n        \"\"\"Set the output directory\"\"\"\n        value = str(Path(value).resolve())\n        if not value.endswith(\"/\"):\n            value += \"/\"\n        self._output_dir = value\n\n    @property\n    def output_initial(self) -&gt; bool:\n        \"\"\"Get the flag for outputting initial state\"\"\"\n        return self._output_initial\n\n    @output_initial.setter\n    def output_initial(self, value: bool) -&gt; None:\n        \"\"\"Set the flag for outputting initial state\"\"\"\n        self._output_initial = bool(value)\n\n    @property\n    def output_interval(self) -&gt; float:\n        \"\"\"Get the output interval\"\"\"\n        return self._output_interval\n\n    @output_interval.setter\n    def output_interval(self, value: float) -&gt; None:\n        \"\"\"Set the output interval\"\"\"\n        self._output_interval = float(value)\n\n    @property\n    def coordinate_output_dtype(self) -&gt; str:\n        \"\"\"Get the data type for coordinate output\"\"\"\n        return self.OUTPUT_ENCODING_TO_DTYPE[self._coordinate_output_dtype]\n\n    @coordinate_output_dtype.setter\n    def coordinate_output_dtype(self, value: str) -&gt; None:\n        \"\"\"Set the data type for coordinate output\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_OUTPUT_DTYPE:\n            raise ValueError(\n                f\"Invalid coordinate output data type: {value}. Available types: {self.AVAILABLE_OUTPUT_DTYPE}\"\n            )\n        self._coordinate_output_dtype: int = self.OUTPUT_DTYPE_TO_ENCODING[value]\n\n    @property\n    def velocity_output_dtype(self) -&gt; str:\n        \"\"\"Get the data type for velocity output\"\"\"\n        return self.OUTPUT_ENCODING_TO_DTYPE[self._velocity_output_dtype]\n\n    @velocity_output_dtype.setter\n    def velocity_output_dtype(self, value: str) -&gt; None:\n        \"\"\"Set the data type for velocity output\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_OUTPUT_DTYPE:\n            raise ValueError(\n                f\"Invalid velocity output data type: {value}. Available types: {self.AVAILABLE_OUTPUT_DTYPE}\"\n            )\n        self._velocity_output_dtype: int = self.OUTPUT_DTYPE_TO_ENCODING[value]\n\n    @property\n    def mass_output_dtype(self) -&gt; str:\n        \"\"\"Get the data type for mass output\"\"\"\n        return self.OUTPUT_ENCODING_TO_DTYPE[self._mass_output_dtype]\n\n    @mass_output_dtype.setter\n    def mass_output_dtype(self, value: str) -&gt; None:\n        \"\"\"Set the data type for mass output\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_OUTPUT_DTYPE:\n            raise ValueError(\n                f\"Invalid mass output data type: {value}. Available types: {self.AVAILABLE_OUTPUT_DTYPE}\"\n            )\n        self._mass_output_dtype: int = self.OUTPUT_DTYPE_TO_ENCODING[value]\n</code></pre>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.coordinate_output_dtype","title":"<code>coordinate_output_dtype</code>  <code>property</code> <code>writable</code>","text":"<p>Get the data type for coordinate output</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.mass_output_dtype","title":"<code>mass_output_dtype</code>  <code>property</code> <code>writable</code>","text":"<p>Get the data type for mass output</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.method","title":"<code>method</code>  <code>property</code> <code>writable</code>","text":"<p>Get the output method</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.output_dir","title":"<code>output_dir</code>  <code>property</code> <code>writable</code>","text":"<p>Get the output directory</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.output_initial","title":"<code>output_initial</code>  <code>property</code> <code>writable</code>","text":"<p>Get the flag for outputting initial state</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.output_interval","title":"<code>output_interval</code>  <code>property</code> <code>writable</code>","text":"<p>Get the output interval</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.OutputParam.velocity_output_dtype","title":"<code>velocity_output_dtype</code>  <code>property</code> <code>writable</code>","text":"<p>Get the data type for velocity output</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.Settings","title":"<code>Settings</code>","text":"<p>Settings for gravity simulation</p> <p>Attributes:</p> Name Type Description <code>verbose</code> <code>str</code> <p>Verbosity level</p> <code>enable_progress_bar</code> <code>bool</code> <p>Flag to enable progress bar</p> Source code in <code>grav_sim/parameters.py</code> <pre><code>class Settings:\n    \"\"\"Settings for gravity simulation\n\n    Attributes\n    ----------\n    verbose : str\n        Verbosity level\n    enable_progress_bar : bool\n        Flag to enable progress bar\n    \"\"\"\n\n    AVAILABLE_VERBOSITY_LEVELS = [\"ignore_all\", \"ignore_info\", \"normal\", \"verbose\"]\n    VERBOSITY_TO_ENCODING = {\n        \"ignore_all\": 0,\n        \"ignore_info\": 1,\n        \"normal\": 2,\n        \"verbose\": 3,\n    }\n    ENCODING_TO_VERBOSITY = {v: k for k, v in VERBOSITY_TO_ENCODING.items()}\n\n    def __init__(self) -&gt; None:\n        self.verbose = \"normal\"\n        self.enable_progress_bar = True\n\n    @property\n    def verbose(self) -&gt; str:\n        \"\"\"Get the verbosity level\"\"\"\n        return self.ENCODING_TO_VERBOSITY[self._verbose]\n\n    @verbose.setter\n    def verbose(self, value: str) -&gt; None:\n        \"\"\"Set the verbosity level\"\"\"\n        value = value.lower().strip()\n        if value not in self.AVAILABLE_VERBOSITY_LEVELS:\n            raise ValueError(\n                f\"Invalid verbosity level: {value}. Available levels: {self.AVAILABLE_VERBOSITY_LEVELS}\"\n            )\n        self._verbose: int = self.VERBOSITY_TO_ENCODING[value]\n\n    @property\n    def enable_progress_bar(self) -&gt; bool:\n        \"\"\"Get the flag for enabling progress bar\"\"\"\n        return self._enable_progress_bar\n\n    @enable_progress_bar.setter\n    def enable_progress_bar(self, value: bool) -&gt; None:\n        \"\"\"Set the flag for enabling progress bar\"\"\"\n        self._enable_progress_bar = bool(value)\n</code></pre>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.Settings.enable_progress_bar","title":"<code>enable_progress_bar</code>  <code>property</code> <code>writable</code>","text":"<p>Get the flag for enabling progress bar</p>"},{"location":"docs/documentations/PythonAPI/parameters/#grav_sim.parameters.Settings.verbose","title":"<code>verbose</code>  <code>property</code> <code>writable</code>","text":"<p>Get the verbosity level</p>"},{"location":"docs/getting_started/","title":"Getting started","text":"<p>grav_sim is a package written in C provided with a Python wrapper. Therefore, you can choose to install in either C or Python. The performance difference between the two is negligible.</p> <p>Here we provide a quick installation guide for Python. For a more detailed guide, please refer to Installation in C and Installation in Python.</p> MacOS / LinuxWindows <p>The package is available on PyPI, and could be installed directly using pip: <pre><code>pip install grav_sim\n</code></pre> To check whether it is successfully installed, run <pre><code>python -m grav_sim\n</code></pre> You should see the compilation information and the path to the compiled library. If not, you may need to refer to Installation in Python. <pre><code>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.4\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: true\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 16 2025 13:12:32\nCompiler: GCC (version: 14)\n-----------------------------------------------------------------\nC library location: /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/libgrav_sim.dylib\n</code></pre></p> <p>The package is available on PyPI. However, I am not sure if it would work on Windows. Try following the guides for MacOS / Linux. If it does not work, please refer to Installation in Python, or install WSL (Windows Subsystem for Linux).</p>"},{"location":"docs/getting_started/installation_in_c/","title":"Installation in C","text":"<p>Below are the dependencies for the package:</p> <ul> <li>C compiler, preferably GCC or Clang</li> <li>CMake</li> </ul> <p>Optional dependencies:</p> <ul> <li>HDF5 (For data storage. Optional but recommended)</li> <li>FFTW3 (Only required for cosmological simulations)</li> <li>OpenMP</li> </ul> <p>Below is an example for compiling a C program with grav_sim.</p> <ol> <li> <p>Clone the repository to your local machine: <pre><code>git clone https://github.com/alvinng4/grav_sim\n</code></pre></p> </li> <li> <p>Create a project directory. Lets call it <code>test/</code> <pre><code>mkdir test\ncd test\n</code></pre></p> </li> <li> <p>Create <code>test.c</code> and <code>CMakeLists.txt</code> in <code>test/</code>: test.c<pre><code>#include &lt;grav_sim.h&gt;\n\nint main(void)\n{\n    print_compilation_info();\n    return 0;\n}\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.10)\nproject(test C)\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O3 -Wall -Wextra -Wpedantic\")\n\n# Define source and library directories\nset(SRC_DIR ../grav_sim)    # &lt;-- Make sure the path is correct\ninclude_directories(${SRC_DIR})\n\n# Define the executable\nadd_executable(test test.c)\n\n# Link against the grav_sim library\nadd_subdirectory(${SRC_DIR} build)\ntarget_link_libraries(test PRIVATE grav_sim)\n</code></pre></p> </li> <li> <p>Create a build directory and compile the code: <pre><code>mkdir build\ncd build\ncmake [-DUSE_OPENMP=ON -DUSE_FFTW3=ON -DUSE_HDF5=ON] [-DCMAKE_C_COMPILER=gcc] ..\ncmake --build .\n</code></pre></p> <ul> <li><code>-DUSE_OPENMP=ON -DUSE_FFTW3=ON -DUSE_HDF5=ON</code>: optional flags for the dependencies.</li> <li><code>-DCMAKE_C_COMPILER=gcc</code>: optional flag to specify the C compiler.</li> </ul> </li> <li> <p>Run the code: <pre><code>./test\n</code></pre> You should see something like this: <pre><code>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.4\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: true\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: true\n    Version: fftw-3.3.10\n\nBuild time: Apr 16 2025 18:31:10\nCompiler: GCC (version: 14)\n-----------------------------------------------------------------\n</code></pre></p> </li> </ol> <p>Congrats!  Now you have successfully built a project with the grav_sim package in C.</p>"},{"location":"docs/getting_started/installation_in_python/","title":"Installation in Python","text":"<p>For basic install, follow the quick guide at Getting Started. Here we provide a more detailed installation guide for Python.</p> <p>Below are the dependencies for the package:</p> <ul> <li>C compiler, preferably GCC or Clang</li> <li>CMake</li> <li>Python version &gt;= 3.9</li> </ul> <p>Optional dependencies:</p> <ul> <li>HDF5 (For data storage. Optional but recommended)</li> <li>FFTW3 (Only required for cosmological simulations)</li> <li>OpenMP</li> </ul> <p>Python packages: (Check <code>requirements.txt</code> for the latest version)</p> <ul> <li>NumPy</li> <li>Matplotlib</li> <li>h5py</li> </ul> <p>There are multiple ways to install the package, depending on your use case.</p>"},{"location":"docs/getting_started/installation_in_python/#installing-with-pip-and-local-compilation","title":"Installing with pip and local compilation","text":"<p>If you want to compile the package locally, you could run <pre><code>export CMAKE_ARGS=\"-DUSE_HDF5=ON -DUSE_OPENMP=ON -DUSE_FFTW3=ON -DCMAKE_C_COMPILER=gcc ..\" // Choose the options you want\npip install grav_sim --no-binary grav_sim --no-cache-dir\n</code></pre> To check whether it is successfully installed, run <pre><code>python -m grav_sim\n</code></pre> You should see the compilation information and the path to the compiled library. <pre><code>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.4\n\nOperating System: MacOS\nCompilation Info:\nCompiled with OpenMP: true\nCompiled with HDF5: true\n    Version: 1.14.6\nCompiled with FFTW3: false\n\nBuild time: Apr 16 2025 13:12:32\nCompiler: GCC (version: 14)\n-----------------------------------------------------------------\nC library location: /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/libgrav_sim.dylib\n</code></pre></p>"},{"location":"docs/getting_started/installation_in_python/#compiling-the-c-library-directly-from-source","title":"Compiling the C library directly from source","text":"<p>This way should work on all platforms as long as you could get the C library compiled on your system.</p> <ol> <li>Clone the repository to your local machine and navigate to the directory: <pre><code>git clone https://github.com/alvinng4/grav_sim\ncd grav_sim\n</code></pre></li> <li>Create a build directory inside the repository: <pre><code>mkdir build\ncd build\n</code></pre></li> <li> <p>Compile the library with CMake <pre><code>cmake [-DUSE_OPENMP=ON -DUSE_FFTW3=ON -DUSE_HDF5=ON] [-DCMAKE_C_COMPILER=gcc] ..\ncmake --build .\n</code></pre></p> <ul> <li><code>-DUSE_OPENMP=ON -DUSE_FFTW3=ON -DUSE_HDF5=ON</code>: optional flags for the dependencies.</li> <li><code>-DCMAKE_C_COMPILER=gcc</code>: optional flag to specify the C compiler.</li> </ul> </li> <li> <p>Check the compilation. You should see one of the following files in the <code>build</code> directory. <pre><code>libgrav_sim.dylib\nlibgrav_sim.so\nlibgrav_sim.dll\n</code></pre> This is the compiled C library. Navigate back to the parent directory and run the grav_sim that comes with the repository. The program will search for the file automatically as long as it is within the repository. <pre><code>cd ..\npython -m grav_sim\n</code></pre> You should see the compilation information and the path to the C library. <pre><code>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.4\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: true\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: true\n    Version: fftw-3.3.10\n\nBuild time: Apr 16 2025 20:39:29\nCompiler: GCC (version: 14)\n-----------------------------------------------------------------\nC library location: /Users/alvinng/Desktop/grav_sim/build/libgrav_sim.dylib\n</code></pre></p> </li> <li> <p>We are almost there. Install the required dependencies for Python. <pre><code>pip install -r requirements.txt\n</code></pre> Now you are good to go!</p> </li> </ol>"},{"location":"examples/","title":"Index","text":"<p>Coming Soon!</p>"},{"location":"examples/solar_system_one_mil_yrs/","title":"Evolving Solar system simulation for one million years","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nfrom grav_sim import GravitySimulatorAPI\n\ngs = GravitySimulatorAPI()\n\nprint()\nprint(\"Available built-in systems:\", gs.BUILT_IN_SYSTEMS)\nprint(\"Available acceleration methods:\", gs.AVAILABLE_ACCELERATION_METHODS)\nprint(\"Available integrators:\", gs.AVAILABLE_INTEGRATORS)\nprint(\"Fixed step size integrators:\", gs.FIXED_STEP_SIZE_INTEGRATORS)\nprint(\"Adaptive step size integrators:\", gs.ADAPTIVE_STEP_SIZE_INTEGRATORS)\nprint(\"Available output methods:\", gs.AVAILABLE_OUTPUT_METHODS)\nprint(\"Available output data types:\", gs.AVAILABLE_OUTPUT_DTYPE)\n\ncolors = [\n    \"orange\",\n    \"slategrey\",\n    \"wheat\",\n    \"skyblue\",\n    \"red\",\n    \"darkgoldenrod\",\n    \"gold\",\n    \"paleturquoise\",\n    \"blue\",   \n]\nlabels = [\n    \"Sun\",\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n]\n</pre> import numpy as np from grav_sim import GravitySimulatorAPI  gs = GravitySimulatorAPI()  print() print(\"Available built-in systems:\", gs.BUILT_IN_SYSTEMS) print(\"Available acceleration methods:\", gs.AVAILABLE_ACCELERATION_METHODS) print(\"Available integrators:\", gs.AVAILABLE_INTEGRATORS) print(\"Fixed step size integrators:\", gs.FIXED_STEP_SIZE_INTEGRATORS) print(\"Adaptive step size integrators:\", gs.ADAPTIVE_STEP_SIZE_INTEGRATORS) print(\"Available output methods:\", gs.AVAILABLE_OUTPUT_METHODS) print(\"Available output data types:\", gs.AVAILABLE_OUTPUT_DTYPE)  colors = [     \"orange\",     \"slategrey\",     \"wheat\",     \"skyblue\",     \"red\",     \"darkgoldenrod\",     \"gold\",     \"paleturquoise\",     \"blue\",    ] labels = [     \"Sun\",     \"Mercury\",     \"Venus\",     \"Earth\",     \"Mars\",     \"Jupiter\",     \"Saturn\",     \"Uranus\",     \"Neptune\", ] <pre>\nAvailable built-in systems: ['circular_binary_orbit', 'eccentric_binary_orbit', '3d_helix', 'sun_earth_moon', 'figure-8', 'pyth-3-body', 'solar_system', 'solar_system_plus']\nAvailable acceleration methods: ['pairwise', 'massless', 'barnes_hut', 'particle_mesh']\nAvailable integrators: ['euler', 'euler_cromer', 'rk4', 'leapfrog', 'rkf45', 'dopri', 'dverk', 'rkf78', 'ias15', 'whfast']\nFixed step size integrators: ['euler', 'euler_cromer', 'rk4', 'leapfrog', 'whfast']\nAdaptive step size integrators: ['rkf45', 'dopri', 'dverk', 'rkf78', 'ias15']\nAvailable output methods: ['disabled', 'csv', 'hdf5']\nAvailable output data types: ['float', 'double']\n</pre> In\u00a0[2]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\n\n### Parameters ###\ntf = gs.years_to_days(1000000.0)  # One million years\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"whfast\"\nintegrator_param.dt = 5.0\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 1000.0\n</pre> system = gs.get_built_in_system(\"solar_system\")  ### Parameters ### tf = gs.years_to_days(1000000.0)  # One million years  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"whfast\" integrator_param.dt = 5.0  output_param.method = \"csv\" output_param.output_interval = tf / 1000.0 In\u00a0[3]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.3\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 12 2025 00:34:13\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 3.65242e+08\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: WHFAST\n  dt: 5\n  WHFast remove invalid particles: true\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\n  Output initial condition: true\n  Output interval: 365242\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0% \u2022 00:00:00 \u2022 --:--:--</pre> <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\".\n</pre> <pre>\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:01:47 \u2022 00:00:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  14% \u2022 00:00:15 \u2022 00:01:26\n</pre> In\u00a0[4]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\n\nsol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir )  sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[5]: Copied! <pre>eccentricity = gs.compute_eccentricity(G, sol_state)\ngs.plot_quantity_against_time(\n    quantity=eccentricity,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"eccentricity\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n\ninclination = gs.compute_inclination(sol_state)\ngs.plot_quantity_against_time(\n    quantity=inclination,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"inclination\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n</pre> eccentricity = gs.compute_eccentricity(G, sol_state) gs.plot_quantity_against_time(     quantity=eccentricity,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"eccentricity\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, )  inclination = gs.compute_inclination(sol_state) gs.plot_quantity_against_time(     quantity=inclination,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"inclination\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, ) In\u00a0[6]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n\ndel system\ndel acc_param\ndel integrator_param\ndel output_param\ndel settings\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)  del system del acc_param del integrator_param del output_param del settings In\u00a0[7]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\n\n### Parameters ###\ntf = gs.years_to_days(1000000.0)  # One million years\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"ias15\"\nintegrator_param.tolerance = 1e-9\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 1000.0\n</pre> system = gs.get_built_in_system(\"solar_system\")  ### Parameters ### tf = gs.years_to_days(1000000.0)  # One million years  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"ias15\" integrator_param.tolerance = 1e-9  output_param.method = \"csv\" output_param.output_interval = tf / 1000.0 In\u00a0[8]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.3\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 12 2025 00:34:13\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 3.65242e+08\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: IAS15\n  Tolerance: 1e-09\n  Initial dt (if applicable): -1\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\n  Output initial condition: true\n  Output interval: 365242\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 02:48:29 \u2022 00:00:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   1% \u2022 00:03:14 \u2022 02:53:46\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   2% \u2022 00:03:41 \u2022 03:13:18\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   4% \u2022 00:08:01 \u2022 03:15:06\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   8% \u2022 00:14:10 \u2022 04:52:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   8% \u2022 00:15:24 \u2022 07:05:43\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  11% \u2022 00:19:54 \u2022 02:37:13\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  14% \u2022 00:24:42 \u2022 02:49:17\u2501\u2501\u2501\u2501  16% \u2022 00:28:12 \u2022 02:15:01\u2501\u2501\u2501  17% \u2022 00:29:21 \u2022 03:00:34\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  20% \u2022 00:35:39 \u2022 04:07:08\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  24% \u2022 00:42:01 \u2022 02:09:29\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  27% \u2022 00:47:16 \u2022 03:04:27\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  29% \u2022 00:49:08 \u2022 01:54:33\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  36% \u2022 01:01:09 \u2022 03:19:07\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  46% \u2022 01:17:41 \u2022 01:31:30\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  47% \u2022 01:19:59 \u2022 02:23:34\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  74% \u2022 02:00:21 \u2022 00:47:57\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  77% \u2022 02:05:05 \u2022 00:43:59\u2501\u2501\u2501  78% \u2022 02:07:26 \u2022 00:40:19\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  78% \u2022 02:07:39 \u2022 00:44:45\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  79% \u2022 02:07:55 \u2022 00:53:09\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  82% \u2022 02:14:05 \u2022 00:33:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  83% \u2022 02:16:30 \u2022 00:27:14\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  84% \u2022 02:16:48 \u2022 00:25:56\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  86% \u2022 02:21:11 \u2022 00:29:44\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  91% \u2022 02:30:09 \u2022 00:19:02\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  92% \u2022 02:31:52 \u2022 00:38:49\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  93% \u2022 02:34:39 \u2022 00:22:43\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  97% \u2022 02:42:39 \u2022 00:09:01\n</pre> In\u00a0[9]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\n\nsol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir )  sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[10]: Copied! <pre>eccentricity = gs.compute_eccentricity(G, sol_state)\ngs.plot_quantity_against_time(\n    quantity=eccentricity,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"eccentricity\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n\ninclination = gs.compute_inclination(sol_state)\ngs.plot_quantity_against_time(\n    quantity=inclination,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"inclination\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n</pre> eccentricity = gs.compute_eccentricity(G, sol_state) gs.plot_quantity_against_time(     quantity=eccentricity,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"eccentricity\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, )  inclination = gs.compute_inclination(sol_state) gs.plot_quantity_against_time(     quantity=inclination,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"inclination\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, ) In\u00a0[11]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n\ndel system\ndel acc_param\ndel integrator_param\ndel output_param\ndel settings\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)  del system del acc_param del integrator_param del output_param del settings In\u00a0[12]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\n\n### Parameters ###\ntf = gs.years_to_days(1000000.0)  # One million years\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"leapfrog\"\nintegrator_param.dt = 0.5\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 1000.0\n</pre> system = gs.get_built_in_system(\"solar_system\")  ### Parameters ### tf = gs.years_to_days(1000000.0)  # One million years  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"leapfrog\" integrator_param.dt = 0.5  output_param.method = \"csv\" output_param.output_interval = tf / 1000.0 In\u00a0[13]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.3\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 12 2025 00:34:13\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 3.65242e+08\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: Leapfrog\n  dt: 0.5\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\n  Output initial condition: true\n  Output interval: 365242\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:03:44 \u2022 00:00:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  29% \u2022 00:01:04 \u2022 00:09:07\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  30% \u2022 00:01:06 \u2022 00:05:06\n</pre> In\u00a0[14]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\n\nsol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n\neccentricity = gs.compute_eccentricity(G, sol_state)\ngs.plot_quantity_against_time(\n    quantity=eccentricity,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"eccentricity\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n\ninclination = gs.compute_inclination(sol_state)\ngs.plot_quantity_against_time(\n    quantity=inclination,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"inclination\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir )  sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", )  eccentricity = gs.compute_eccentricity(G, sol_state) gs.plot_quantity_against_time(     quantity=eccentricity,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"eccentricity\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, )  inclination = gs.compute_inclination(sol_state) gs.plot_quantity_against_time(     quantity=inclination,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"inclination\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, ) In\u00a0[15]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n\ndel system\ndel acc_param\ndel integrator_param\ndel output_param\ndel settings\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)  del system del acc_param del integrator_param del output_param del settings <p>Let's try a smaller $\\text{d}t = 0.1 \\text{ days}$ and see if the result improves.</p> In\u00a0[16]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\n\n### Parameters ###\ntf = gs.years_to_days(1000000.0)  # One million years\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"leapfrog\"\nintegrator_param.dt = 0.1\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 1000.0\n</pre> system = gs.get_built_in_system(\"solar_system\")  ### Parameters ### tf = gs.years_to_days(1000000.0)  # One million years  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"leapfrog\" integrator_param.dt = 0.1  output_param.method = \"csv\" output_param.output_interval = tf / 1000.0 In\u00a0[17]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.3\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 12 2025 00:34:13\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 3.65242e+08\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: Leapfrog\n  dt: 0.1\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\n  Output initial condition: true\n  Output interval: 365242\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:18:54 \u2022 00:00:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  25% \u2022 00:04:26 \u2022 00:16:42\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  36% \u2022 00:06:50 \u2022 00:21:03\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  48% \u2022 00:09:12 \u2022 00:10:34\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  58% \u2022 00:10:52 \u2022 00:07:41\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  60% \u2022 00:11:23 \u2022 00:18:28\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  78% \u2022 00:14:32 \u2022 00:06:23\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  78% \u2022 00:14:33 \u2022 00:10:14\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  96% \u2022 00:17:43 \u2022 00:00:41\n</pre> In\u00a0[18]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\n\nsol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n\neccentricity = gs.compute_eccentricity(G, sol_state)\ngs.plot_quantity_against_time(\n    quantity=eccentricity,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"eccentricity\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n\ninclination = gs.compute_inclination(sol_state)\ngs.plot_quantity_against_time(\n    quantity=inclination,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"inclination\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir )  sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", )  eccentricity = gs.compute_eccentricity(G, sol_state) gs.plot_quantity_against_time(     quantity=eccentricity,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"eccentricity\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, )  inclination = gs.compute_inclination(sol_state) gs.plot_quantity_against_time(     quantity=inclination,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"inclination\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, ) In\u00a0[19]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n\ndel system\ndel acc_param\ndel integrator_param\ndel output_param\ndel settings\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)  del system del acc_param del integrator_param del output_param del settings In\u00a0[20]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\n\n### Parameters ###\ntf = gs.years_to_days(1000000.0)  # One million years\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"rk4\"\nintegrator_param.dt = 0.5\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 1000.0\n</pre> system = gs.get_built_in_system(\"solar_system\")  ### Parameters ### tf = gs.years_to_days(1000000.0)  # One million years  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"rk4\" integrator_param.dt = 0.5  output_param.method = \"csv\" output_param.output_interval = tf / 1000.0 In\u00a0[21]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.3\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: true\n    Version: 1.14.6\n  Compiled with FFTW3: false\n\nBuild time: Apr 12 2025 00:34:13\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 3.65242e+08\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: RK4\n  dt: 0.5\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/grav_sim/examples/tmp/\n  Output initial condition: true\n  Output interval: 365242\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:13:55 \u2022 00:00:00\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  11% \u2022 00:02:06 \u2022 00:23:00\u2501\u2501\u2501\u2501\u2501  27% \u2022 00:04:20 \u2022 00:12:06\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  53% \u2022 00:07:31 \u2022 00:09:29\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  61% \u2022 00:08:38 \u2022 00:08:49\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  96% \u2022 00:13:26 \u2022 00:00:25\n</pre> In\u00a0[22]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\n\nsol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n\neccentricity = gs.compute_eccentricity(G, sol_state)\ngs.plot_quantity_against_time(\n    quantity=eccentricity,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"eccentricity\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n\ninclination = gs.compute_inclination(sol_state)\ngs.plot_quantity_against_time(\n    quantity=inclination,\n    is_log_y=False,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n    ylabel=\"inclination\",\n    colors=colors[1:],  # Exclude the Sun\n    labels=labels[1:],  # Exclude the Sun\n    legend=True,\n)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir )  sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", )  eccentricity = gs.compute_eccentricity(G, sol_state) gs.plot_quantity_against_time(     quantity=eccentricity,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"eccentricity\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, )  inclination = gs.compute_inclination(sol_state) gs.plot_quantity_against_time(     quantity=inclination,     is_log_y=False,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\",     ylabel=\"inclination\",     colors=colors[1:],  # Exclude the Sun     labels=labels[1:],  # Exclude the Sun     legend=True, ) In\u00a0[\u00a0]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n\ndel system\ndel acc_param\ndel integrator_param\ndel output_param\ndel settings\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)  del system del acc_param del integrator_param del output_param del settings"},{"location":"examples/solar_system_one_mil_yrs/#evolving-solar-system-simulation-for-one-million-years","title":"Evolving Solar system simulation for one million years\u00b6","text":"<p>N-body simulations can help us understanding the evolution of our solar system. Let's try to simulate it with different algorithms and compare the secular evolution.</p> <p>If your system can't run or render this notebook, you could view it on github.</p>"},{"location":"examples/solar_system_one_mil_yrs/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/solar_system_one_mil_yrs/#whfast","title":"WHFast\u00b6","text":"<p>We will start with the WHFast algorithm. This algorithm is symplectic (conserves energy over long simulation period). It is suitable for stable systems like our solar system.</p> <p>We start with $\\text{d}t = 5.0 \\text{ days}$. For most computers, it should only take a few minutes.</p>"},{"location":"examples/solar_system_one_mil_yrs/#data-analysis","title":"Data analysis\u00b6","text":"<p>Let's plot the relative energy error. We can see that the error is bounded within $5 \\times 10^{-8}$ even over 1 million years!</p>"},{"location":"examples/solar_system_one_mil_yrs/#secular-evolution","title":"Secular evolution\u00b6","text":"<p>We can visualize the secular evolution of the solar system over 1 million years by plotting their eccentricity and inclination.</p>"},{"location":"examples/solar_system_one_mil_yrs/#comparison-between-algorithms","title":"Comparison between algorithms\u00b6","text":"<p>Now, we can compare WHFast with other algorithms.</p>"},{"location":"examples/solar_system_one_mil_yrs/#ias15","title":"IAS15\u00b6","text":"<p>IAS15 is a high order integrator with extreme accuracy. However, running this may take 2 hours - 10 hours, depending on your computer.</p>"},{"location":"examples/solar_system_one_mil_yrs/#data-analysis","title":"Data analysis\u00b6","text":"<p>Here, the energy error is not bounded like WHFast, but it is growing very slowly! After 1 million years, the error remains in the order of $10^{-14}$. This is due to the accuracy of IAS15 and the reduction of round-off error by using compensated summation.</p>"},{"location":"examples/solar_system_one_mil_yrs/#secular-evolution","title":"Secular evolution\u00b6","text":"<p>Comparing the secular evolution with WHFast, we can see that they agree extremely well with each other.</p>"},{"location":"examples/solar_system_one_mil_yrs/#leapfrog","title":"LeapFrog\u00b6","text":"<p>LeapFrog is a second order symplectic method that conserves energy and is very simple to implement. Let us try $\\text{d}t = 0.5 \\text{ days}$. The run time should be very close to WHFast with $\\text{d}t = 5.0 \\text{ days}$.</p>"},{"location":"examples/solar_system_one_mil_yrs/#data-analysis","title":"Data analysis\u00b6","text":"<p>Again, we can see the relative energy error is bounded! However, for the secular evolution, we can see that the eccentricity does not agree very well with IAS15 and WHFast. Inclination, on the other hand, agrees relatively well except for Mercury.</p>"},{"location":"examples/solar_system_one_mil_yrs/#data-analysis","title":"Data Analysis\u00b6","text":"<p>Unfortunately, the round-off error starts to build up as we used a very small $\\text{d}t$. The energy error is no longer bounded and the secular evolution became unstable for all planets.</p>"},{"location":"examples/solar_system_one_mil_yrs/#rk4","title":"RK4\u00b6","text":"<p>RK4 is another popular n-body algorithm, which has a good balance on computational cost and accuracy. Since it does not conserve energy, it is not suitable for long term simulations.</p> <p>We will use $\\text{d}t = 0.5 \\text{ days}$.</p>"},{"location":"examples/solar_system_one_mil_yrs/#data-analysis","title":"Data analysis\u00b6","text":"<p>We can see that the energy error goes up to $10^{-4}$, which is not ideal. Nevertheless, looking at the secular evolution, we can see that it performed a lot better than LeapFrog.</p>"},{"location":"examples/solar_system_one_mil_yrs/#end","title":"END\u00b6","text":""},{"location":"examples/tutorial/","title":"Tutorial (Python)","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nfrom pathlib import Path\n\nimport numpy as np\n\nfrom grav_sim import GravitySimulatorAPI\n\ngs = GravitySimulatorAPI()\n\n# If the program couldn't find the C library, you may specify it manually\n# gs = GravitySimulatorAPI(c_lib_path=\"path_to_your_c_lib.so\")\n\nprint()\nprint(\"Available built-in systems:\", gs.BUILT_IN_SYSTEMS)\nprint(\"Available acceleration methods:\", gs.AVAILABLE_ACCELERATION_METHODS)\nprint(\"Available integrators:\", gs.AVAILABLE_INTEGRATORS)\nprint(\"Fixed step size integrators:\", gs.FIXED_STEP_SIZE_INTEGRATORS)\nprint(\"Adaptive step size integrators:\", gs.ADAPTIVE_STEP_SIZE_INTEGRATORS)\nprint(\"Available output methods:\", gs.AVAILABLE_OUTPUT_METHODS)\nprint(\"Available output data types:\", gs.AVAILABLE_OUTPUT_DTYPE)\n</pre> import os from pathlib import Path  import numpy as np  from grav_sim import GravitySimulatorAPI  gs = GravitySimulatorAPI()  # If the program couldn't find the C library, you may specify it manually # gs = GravitySimulatorAPI(c_lib_path=\"path_to_your_c_lib.so\")  print() print(\"Available built-in systems:\", gs.BUILT_IN_SYSTEMS) print(\"Available acceleration methods:\", gs.AVAILABLE_ACCELERATION_METHODS) print(\"Available integrators:\", gs.AVAILABLE_INTEGRATORS) print(\"Fixed step size integrators:\", gs.FIXED_STEP_SIZE_INTEGRATORS) print(\"Adaptive step size integrators:\", gs.ADAPTIVE_STEP_SIZE_INTEGRATORS) print(\"Available output methods:\", gs.AVAILABLE_OUTPUT_METHODS) print(\"Available output data types:\", gs.AVAILABLE_OUTPUT_DTYPE) <pre>\nAvailable built-in systems: ['circular_binary_orbit', 'eccentric_binary_orbit', '3d_helix', 'sun_earth_moon', 'figure-8', 'pyth-3-body', 'solar_system', 'solar_system_plus']\nAvailable acceleration methods: ['pairwise', 'massless', 'barnes_hut', 'particle_mesh']\nAvailable integrators: ['euler', 'euler_cromer', 'rk4', 'leapfrog', 'rkf45', 'dopri', 'dverk', 'rkf78', 'ias15', 'whfast']\nFixed step size integrators: ['euler', 'euler_cromer', 'rk4', 'leapfrog', 'whfast']\nAdaptive step size integrators: ['rkf45', 'dopri', 'dverk', 'rkf78', 'ias15']\nAvailable output methods: ['disabled', 'csv', 'hdf5']\nAvailable output data types: ['float', 'double']\n</pre> In\u00a0[2]: Copied! <pre>system = gs.get_built_in_system(\"solar_system\")\nprint(system.num_particles)\nprint(system.particle_ids)\nprint(system.x)\nprint(system.v)\nprint(system.m)\n</pre> system = gs.get_built_in_system(\"solar_system\") print(system.num_particles) print(system.particle_ids) print(system.x) print(system.v) print(system.m) <pre>9\n[0 1 2 3 4 5 6 7 8]\n[[-7.96712825e-03 -2.90611166e-03  2.10213120e-04]\n [-2.82597500e-01  1.97456095e-01  4.17742433e-02]\n [-7.23209543e-01 -7.94829045e-02  4.04286220e-02]\n [-1.73818374e-01  9.66324671e-01  1.55297876e-04]\n [-3.01325412e-01 -1.45402922e+00 -2.30054066e-02]\n [ 3.48520330e+00  3.55213702e+00 -9.27104467e-02]\n [ 8.98810505e+00 -3.71906474e+00 -2.93193870e-01]\n [ 1.22630250e+01  1.52973880e+01 -1.02054995e-01]\n [ 2.98350154e+01 -1.79381284e+00 -6.50640206e-01]]\n[[ 4.87524241e-06 -7.05716139e-06 -4.57929038e-08]\n [-2.23216589e-02 -2.15720711e-02  2.85519283e-04]\n [ 2.03406835e-03 -2.02082863e-02 -3.94564043e-04]\n [-1.72300122e-02 -2.96772137e-03  6.38154172e-07]\n [ 1.42483227e-02 -1.57923621e-03 -3.82372338e-04]\n [-5.47097051e-03  5.64248731e-03  9.89618477e-05]\n [ 1.82201399e-03  5.14347040e-03 -1.61723649e-04]\n [-3.09761521e-03  2.27678190e-03  4.86042739e-05]\n [ 1.67653809e-04  3.15209870e-03 -6.87750693e-05]]\n[1.00000000e+00 1.66012083e-07 2.44783829e-06 3.00348962e-06\n 3.22715608e-07 9.54791910e-04 2.85885670e-04 4.36624961e-05\n 5.15138377e-05]\n</pre> In\u00a0[3]: Copied! <pre># Remove Jupiter\n# system.remove(particle_ids=5)\n\n# Add a new particle (you could also add multiple particles at once)\nx = np.array([-8.092549658731499e-02, 2.558381434460076e00, -6.695836142398572e-02])\nv = np.array(\n    [\n        -1.017876585480054e-02,\n        -5.452367109338154e-04,\n        1.255870551153315e-03,\n    ]\n)\nm = 1.30268459e-10\nsystem.add(x, v, m)\n\n# Add a new particle using Keplerian elements\nsystem.add_keplerian(\n    semi_major_axis=4.2,\n    eccentricity=0.1,\n    inclination=0.1,\n    longitude_of_ascending_node=1.0,\n    argument_of_periapsis=1.0,\n    true_anomaly=1.0,\n    m=1.5e-9,\n    primary_particle_id=0,\n)\n\nsystem.center_of_mass_correction()\n\nprint(system.particle_ids)\nprint(system.x)\n</pre> # Remove Jupiter # system.remove(particle_ids=5)  # Add a new particle (you could also add multiple particles at once) x = np.array([-8.092549658731499e-02, 2.558381434460076e00, -6.695836142398572e-02]) v = np.array(     [         -1.017876585480054e-02,         -5.452367109338154e-04,         1.255870551153315e-03,     ] ) m = 1.30268459e-10 system.add(x, v, m)  # Add a new particle using Keplerian elements system.add_keplerian(     semi_major_axis=4.2,     eccentricity=0.1,     inclination=0.1,     longitude_of_ascending_node=1.0,     argument_of_periapsis=1.0,     true_anomaly=1.0,     m=1.5e-9,     primary_particle_id=0, )  system.center_of_mass_correction()  print(system.particle_ids) print(system.x) <pre>[ 0  1  2  3  4  5  6  7  8  9 10]\n[[-7.96712240e-03 -2.90611281e-03  2.10212592e-04]\n [-2.82597494e-01  1.97456094e-01  4.17742427e-02]\n [-7.23209537e-01 -7.94829056e-02  4.04286214e-02]\n [-1.73818368e-01  9.66324670e-01  1.55297348e-04]\n [-3.01325406e-01 -1.45402922e+00 -2.30054072e-02]\n [ 3.48520330e+00  3.55213702e+00 -9.27104473e-02]\n [ 8.98810506e+00 -3.71906474e+00 -2.93193871e-01]\n [ 1.22630250e+01  1.52973880e+01 -1.02054996e-01]\n [ 2.98350154e+01 -1.79381284e+00 -6.50640206e-01]\n [-8.09254907e-02  2.55838143e+00 -6.69583620e-02]\n [-3.89826791e+00  5.44109952e-01  3.58317628e-01]]\n</pre> In\u00a0[4]: Copied! <pre>tmp_path = Path(os.getcwd()) / \"customized_systems.csv\"\n\nsystem.save(tmp_path)\n\n# You can also load customized system from csv files\nsystem = gs.load_system(tmp_path)\n</pre> tmp_path = Path(os.getcwd()) / \"customized_systems.csv\"  system.save(tmp_path)  # You can also load customized system from csv files system = gs.load_system(tmp_path) <pre>System successfully saved to \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/customized_systems.csv\"\n</pre> In\u00a0[5]: Copied! <pre>system.plot_3d_system()\n</pre> system.plot_3d_system() In\u00a0[6]: Copied! <pre>tf = gs.years_to_days(1000.0)  # The default units is AU, solar mass, and days\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"leapfrog\"\nintegrator_param.dt = 0.1\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 2000.0\n</pre> tf = gs.years_to_days(1000.0)  # The default units is AU, solar mass, and days  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"leapfrog\" integrator_param.dt = 0.1  output_param.method = \"csv\" output_param.output_interval = tf / 2000.0 In\u00a0[7]: Copied! <pre>gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf)\n</pre> gs.launch_simulation(system, acc_param, integrator_param, output_param, settings, tf) <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.1\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: false\n  Compiled with FFTW3: false\n\nBuild time: Apr 11 2025 11:49:33\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 365242\n\nSystem:\n  Number of particles: 11\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: Leapfrog\n  dt: 0.1\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\n  Output initial condition: true\n  Output interval: 182.621\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0% \u2022 00:00:00 \u2022 00:00:00</pre> <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\".\n</pre> <pre>\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:00:02 \u2022 00:00:00\n</pre> In\u00a0[8]: Copied! <pre>G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\nprint(f\"Data size = {len(sol_state)}\")\nprint(G)\nprint(sol_time.shape)\nprint(sol_dt.shape)\nprint(sol_particle_ids.shape)\nprint(sol_state.shape)\n</pre> G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir ) print(f\"Data size = {len(sol_state)}\") print(G) print(sol_time.shape) print(sol_dt.shape) print(sol_particle_ids.shape) print(sol_state.shape) <pre>Data size = 2000\n0.0002959122082841195\n(2000,)\n(2000,)\n(11,)\n(2000, 11, 7)\n</pre> In\u00a0[9]: Copied! <pre>gs.plot_2d_trajectory(\n    sol_state,\n    colors=[\n        \"orange\",\n        \"slategrey\",\n        \"wheat\",\n        \"skyblue\",\n        \"red\",\n        \"darkgoldenrod\",\n        \"gold\",\n        \"paleturquoise\",\n        \"blue\",\n        None,\n        None,\n    ],\n    labels=[\n        \"Sun\",\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n        \"Custom1\",\n        \"Custom2\",\n    ],\n    legend=True,\n)\n</pre> gs.plot_2d_trajectory(     sol_state,     colors=[         \"orange\",         \"slategrey\",         \"wheat\",         \"skyblue\",         \"red\",         \"darkgoldenrod\",         \"gold\",         \"paleturquoise\",         \"blue\",         None,         None,     ],     labels=[         \"Sun\",         \"Mercury\",         \"Venus\",         \"Earth\",         \"Mars\",         \"Jupiter\",         \"Saturn\",         \"Uranus\",         \"Neptune\",         \"Custom1\",         \"Custom2\",     ],     legend=True, ) In\u00a0[10]: Copied! <pre>sol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[11]: Copied! <pre>sol_linear_momentum = gs.compute_linear_momentum(sol_state)\ngs.plot_rel_linear_momentum_error(\n    sol_linear_momentum=sol_linear_momentum,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_linear_momentum = gs.compute_linear_momentum(sol_state) gs.plot_rel_linear_momentum_error(     sol_linear_momentum=sol_linear_momentum,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[12]: Copied! <pre>sol_angular_momentum = gs.compute_angular_momentum(sol_state)\ngs.plot_rel_angular_momentum_error(\n    sol_angular_momentum=sol_angular_momentum,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_angular_momentum = gs.compute_angular_momentum(sol_state) gs.plot_rel_angular_momentum_error(     sol_angular_momentum=sol_angular_momentum,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[13]: Copied! <pre>gs.plot_quantity_against_time(\n    quantity=sol_dt[1:],\n    is_log_y=True,\n    sol_time=gs.days_to_years(sol_time[1:]),\n    xlabel=\"Time (years)\",\n    ylabel=\"dt\",\n)\n</pre> gs.plot_quantity_against_time(     quantity=sol_dt[1:],     is_log_y=True,     sol_time=gs.days_to_years(sol_time[1:]),     xlabel=\"Time (years)\",     ylabel=\"dt\", ) <p>Delete the snapshot data</p> In\u00a0[14]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir) In\u00a0[15]: Copied! <pre>### Crate system ###\nIAS15_system = gs.get_built_in_system(\"pyth-3-body\")\n\n\n### Set parameters ###\ntf = 70.0  # The default units is AU, solar mass, and days\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"ias15\"\nintegrator_param.tolerance = 1e-9\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 2000.0\n\n### Launch simulation ###\ngs.launch_simulation(IAS15_system, acc_param, integrator_param, output_param, settings, tf)\n</pre> ### Crate system ### IAS15_system = gs.get_built_in_system(\"pyth-3-body\")   ### Set parameters ### tf = 70.0  # The default units is AU, solar mass, and days  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"ias15\" integrator_param.tolerance = 1e-9  output_param.method = \"csv\" output_param.output_interval = tf / 2000.0  ### Launch simulation ### gs.launch_simulation(IAS15_system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.1\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: false\n  Compiled with FFTW3: false\n\nBuild time: Apr 11 2025 11:49:33\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 70\n\nSystem:\n  Number of particles: 3\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: IAS15\n  Tolerance: 1e-09\n  Initial dt (if applicable): -1\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\n  Output initial condition: true\n  Output interval: 0.035\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:00:00 \u2022 00:00:00\n</pre> <p>Plot the results</p> In\u00a0[16]: Copied! <pre>### Read results ###\nG, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\nprint(f\"Data size = {len(sol_state)}\")\n\n### Plot results ###\nprint(\"Trajectory:\")\ngs.plot_2d_trajectory(sol_state) # Trajectory\n\nprint(\"dt:\")\ngs.plot_quantity_against_time(\n    quantity=sol_dt[1:],\n    is_log_y=True,\n    sol_time=gs.days_to_years(sol_time[1:]),\n    xlabel=\"Time (years)\",\n    ylabel=\"dt\",\n)\n\n# Delete snapshots\ngs.delete_snapshots(output_dir=output_param.output_dir)\n</pre> ### Read results ### G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir ) print(f\"Data size = {len(sol_state)}\")  ### Plot results ### print(\"Trajectory:\") gs.plot_2d_trajectory(sol_state) # Trajectory  print(\"dt:\") gs.plot_quantity_against_time(     quantity=sol_dt[1:],     is_log_y=True,     sol_time=gs.days_to_years(sol_time[1:]),     xlabel=\"Time (years)\",     ylabel=\"dt\", )  # Delete snapshots gs.delete_snapshots(output_dir=output_param.output_dir) <pre>Data size = 2001\nTrajectory:\n</pre> <pre>dt:\n</pre> <p>Let us try the solution again with RK4 with $\\textrm{d} t = 10^{-5}$.</p> <p>(As mentioned above, it would only work if $\\textrm{d} t = 2 \\times 10^{-8}$.)</p> In\u00a0[17]: Copied! <pre>### Crate system ###\nRK4_system = gs.get_built_in_system(\"pyth-3-body\")\n\n### Set parameters ###\ntf = 70.0  # The default units is AU, solar mass, and days\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"rk4\"\nintegrator_param.dt = 1e-5\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 2000.0\n\n### Launch simulation ###\ngs.launch_simulation(RK4_system, acc_param, integrator_param, output_param, settings, tf)\n</pre> ### Crate system ### RK4_system = gs.get_built_in_system(\"pyth-3-body\")  ### Set parameters ### tf = 70.0  # The default units is AU, solar mass, and days  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"rk4\" integrator_param.dt = 1e-5  output_param.method = \"csv\" output_param.output_interval = tf / 2000.0  ### Launch simulation ### gs.launch_simulation(RK4_system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.1\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: false\n  Compiled with FFTW3: false\n\nBuild time: Apr 11 2025 11:49:33\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 70\n\nSystem:\n  Number of particles: 3\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: RK4\n  dt: 1e-05\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\n  Output initial condition: true\n  Output interval: 0.035\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:00:02 \u2022 00:00:00\n</pre> In\u00a0[18]: Copied! <pre>### Read results ###\nG, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\nprint(f\"Data size = {len(sol_state)}\")\n\n### Plot results ###\nprint(\"Trajectory:\")\ngs.plot_2d_trajectory(sol_state) # Trajectory\n\nprint(\"dt:\")\ngs.plot_quantity_against_time(\n    quantity=sol_dt[1:],\n    is_log_y=True,\n    sol_time=gs.days_to_years(sol_time[1:]),\n    xlabel=\"Time (years)\",\n    ylabel=\"dt\",\n)\n\n# Delete snapshots\ngs.delete_snapshots(output_dir=output_param.output_dir)\n</pre> ### Read results ### G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir ) print(f\"Data size = {len(sol_state)}\")  ### Plot results ### print(\"Trajectory:\") gs.plot_2d_trajectory(sol_state) # Trajectory  print(\"dt:\") gs.plot_quantity_against_time(     quantity=sol_dt[1:],     is_log_y=True,     sol_time=gs.days_to_years(sol_time[1:]),     xlabel=\"Time (years)\",     ylabel=\"dt\", )  # Delete snapshots gs.delete_snapshots(output_dir=output_param.output_dir) <pre>Data size = 2001\nTrajectory:\n</pre> <pre>dt:\n</pre> In\u00a0[19]: Copied! <pre>WHFast_system = gs.get_built_in_system(\"solar_system\")\n\ntf = gs.years_to_days(1000.0) # The default units is AU, solar mass, and days\n\nacc_param, integrator_param, output_param, settings = gs.get_new_parameters()\nintegrator_param.integrator = \"whfast\"\nintegrator_param.dt = 5.0\n\noutput_param.method = \"csv\"\noutput_param.output_interval = tf / 2000.0\n\n### Launch simulation ###\ngs.launch_simulation(WHFast_system, acc_param, integrator_param, output_param, settings, tf)\n</pre> WHFast_system = gs.get_built_in_system(\"solar_system\")  tf = gs.years_to_days(1000.0) # The default units is AU, solar mass, and days  acc_param, integrator_param, output_param, settings = gs.get_new_parameters() integrator_param.integrator = \"whfast\" integrator_param.dt = 5.0  output_param.method = \"csv\" output_param.output_interval = tf / 2000.0  ### Launch simulation ### gs.launch_simulation(WHFast_system, acc_param, integrator_param, output_param, settings, tf) <pre>Warning: In \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/src/output.c\", line 231 in finalize_output_param:\n    Directory for storing snapshots already exists. The files will be overwritten. Directory: \"/Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\".\n</pre> <pre>-----------------------------------------------------------------\n                                              __                   \n    __   _ __    __     __  __           ____/\\_\\    ___ ___       \n  /'_ `\\/\\`'__\\/'__`\\  /\\ \\/\\ \\         /',__\\/\\ \\ /' __` __`\\     \n /\\ \\L\\ \\ \\ \\//\\ \\L\\.\\_\\ \\ \\_/ |       /\\__, `\\ \\ \\/\\ \\/\\ \\/\\ \\    \n \\ \\____ \\ \\_\\\\ \\__/.\\_\\\\ \\___/        \\/\\____/\\ \\_\\ \\_\\ \\_\\ \\_\\   \n  \\/___L\\ \\/_/ \\/__/\\/_/ \\/__/   _______\\/___/  \\/_/\\/_/\\/_/\\/_/   \n    /\\____/                     /\\______\\                          \n    \\_/__/                      \\/______/                          \n\n\ngrav_sim version 0.0.1\n\nOperating System: MacOS\nCompilation Info:\n  Compiled with OpenMP: false\n  Compiled with HDF5: false\n  Compiled with FFTW3: false\n\nBuild time: Apr 11 2025 11:49:33\nCompiler: Clang (version: 15)\n-----------------------------------------------------------------\nSimulation parameters:\n  tf: 365242\n\nSystem:\n  Number of particles: 9\n  Gravitational constant: 0.000295912\n\nIntegrator parameters:\n  Integrator: WHFAST\n  dt: 5\n  WHFast remove invalid particles: true\n\nAcceleration parameters:\n  Acceleration method: Pairwise\n  Softening length: 0\n\nOutput parameters:\n  Output method: CSV\n  Output directory: /Users/alvinng/Desktop/cuhk/gravity-simulator/Final Project/gravity-simulator/examples/tmp/\n  Output initial condition: true\n  Output interval: 182.621\n  Coordinate output data type: double\n  Velocity output data type: double\n  Mass output data type: double\n\nSettings:\n  Verbose: Normal\n  Enable progress bar: true\n-----------------------------------------------------------------\nLaunching simulation...\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 00:00:00 \u2022 00:00:00\n</pre> In\u00a0[20]: Copied! <pre>### Read results ###\nG, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(\n    output_param.output_dir\n)\nprint(f\"Data size = {len(sol_state)}\")\n\n### Plot results ###\nprint(\"Trajectory:\")\ngs.plot_2d_trajectory(\n    sol_state,\n    colors=[\n        \"orange\",\n        \"slategrey\",\n        \"wheat\",\n        \"skyblue\",\n        \"red\",\n        \"darkgoldenrod\",\n        \"gold\",\n        \"paleturquoise\",\n        \"blue\",\n        None,\n        None,\n    ],\n    labels=[\n        \"Sun\",\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n        \"Custom1\",\n        \"Custom2\",\n    ],\n    legend=True,\n) # Trajectory\n</pre> ### Read results ### G, sol_time, sol_dt, sol_particle_ids, sol_state = gs.read_csv_data(     output_param.output_dir ) print(f\"Data size = {len(sol_state)}\")  ### Plot results ### print(\"Trajectory:\") gs.plot_2d_trajectory(     sol_state,     colors=[         \"orange\",         \"slategrey\",         \"wheat\",         \"skyblue\",         \"red\",         \"darkgoldenrod\",         \"gold\",         \"paleturquoise\",         \"blue\",         None,         None,     ],     labels=[         \"Sun\",         \"Mercury\",         \"Venus\",         \"Earth\",         \"Mars\",         \"Jupiter\",         \"Saturn\",         \"Uranus\",         \"Neptune\",         \"Custom1\",         \"Custom2\",     ],     legend=True, ) # Trajectory <pre>Data size = 2000\nTrajectory:\n</pre> In\u00a0[21]: Copied! <pre>sol_energy = gs.compute_energy(sol_state, G)\ngs.plot_rel_energy_error(\n    sol_energy=sol_energy,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_energy = gs.compute_energy(sol_state, G) gs.plot_rel_energy_error(     sol_energy=sol_energy,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[22]: Copied! <pre>sol_linear_momentum = gs.compute_linear_momentum(sol_state)\ngs.plot_rel_linear_momentum_error(\n    sol_linear_momentum=sol_linear_momentum,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_linear_momentum = gs.compute_linear_momentum(sol_state) gs.plot_rel_linear_momentum_error(     sol_linear_momentum=sol_linear_momentum,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[23]: Copied! <pre>sol_angular_momentum = gs.compute_angular_momentum(sol_state)\ngs.plot_rel_angular_momentum_error(\n    sol_angular_momentum=sol_angular_momentum,\n    sol_time=gs.days_to_years(sol_time),\n    xlabel=\"Time (years)\",\n)\n</pre> sol_angular_momentum = gs.compute_angular_momentum(sol_state) gs.plot_rel_angular_momentum_error(     sol_angular_momentum=sol_angular_momentum,     sol_time=gs.days_to_years(sol_time),     xlabel=\"Time (years)\", ) In\u00a0[24]: Copied! <pre>gs.delete_snapshots(output_dir=output_param.output_dir)\n</pre> gs.delete_snapshots(output_dir=output_param.output_dir)"},{"location":"examples/tutorial/#tutorial","title":"Tutorial\u00b6","text":"<p>A simple tutorial for using the grav_sim API.</p>"},{"location":"examples/tutorial/#import-libraries","title":"Import libraries\u00b6","text":"<p>First, we import some libraries. If the path is wrong, please correct it manually.</p>"},{"location":"examples/tutorial/#getting-built-in-systems","title":"Getting built-in systems\u00b6","text":""},{"location":"examples/tutorial/#adding-removing-particles","title":"Adding / removing particles\u00b6","text":"<p>Note that the default units are solar masses, AU and days</p>"},{"location":"examples/tutorial/#save-load-system","title":"Save / Load system\u00b6","text":""},{"location":"examples/tutorial/#plotting-initial-conditions","title":"Plotting initial conditions\u00b6","text":""},{"location":"examples/tutorial/#launching-simulation","title":"Launching simulation\u00b6","text":""},{"location":"examples/tutorial/#plotting-trajectories","title":"Plotting trajectories\u00b6","text":""},{"location":"examples/tutorial/#more-plots","title":"More plots\u00b6","text":""},{"location":"examples/tutorial/#adaptive-step-size-integrators","title":"Adaptive step size integrators\u00b6","text":"<p>When using adaptive step size integrators, we provide tolerance rather than $\\text{d}t$ to control the step size.</p> Adaptive step size integrators Recommended tolerance* Runge\u2013Kutta\u2013Fehlberg 4(5) $10^{-8}$ to $10^{-14}$ Dormand\u2013Prince method (DOPRI) 5(4) $10^{-8}$ to $10^{-14}$ Verner's method (DVERK) 6(5) $10^{-8}$ to $10^{-14}$ Runge\u2013Kutta\u2013Fehlberg 7(8) $10^{-4}$ to $10^{-8}$ IAS15 $10^{-9}$ <p>*For reference only</p> <p>Using pyth-3-body, a highly chaotic system, we can easily see the difference between adaptive step size integrators and fixed step size integrators.</p> <p>For RK4, the largest $\\text{d}t$ we can use for this system is 2e-8.</p>"},{"location":"examples/tutorial/#whfast","title":"WHFast\u00b6","text":"<p>WHFast is a symplectic integrator. It is very useful for central mass systems, such as the solar system. Even when using a relatively large dt like 5 days, it can still return a adequate result, given that there are no close encounters and the eccentricities are low.</p>"},{"location":"examples/tutorial/#plot-the-results","title":"Plot the results\u00b6","text":""},{"location":"examples/tutorial/#end","title":"END\u00b6","text":"<p>This is the end of the tutorial. Enjoy building your own projects with grav_sim!</p>"}]}